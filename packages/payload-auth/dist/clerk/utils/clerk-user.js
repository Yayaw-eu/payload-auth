/**
 * Default mapping function for Clerk user data to Payload fields
 */ export const defaultClerkMapping = (clerkUser)=>{
    return {
        clerkId: clerkUser.id,
        email: getPrimaryEmailFromJson(clerkUser),
        emailVerified: clerkUser.email_addresses?.[0]?.verification?.status === 'verified',
        firstName: clerkUser.first_name,
        lastName: clerkUser.last_name,
        imageUrl: clerkUser.image_url,
        lastSyncedAt: new Date(),
        clerkPublicMetadata: clerkUser?.public_metadata || {}
    };
};
/**
 * Ensures that essential Clerk fields are always set regardless of the mapping function
 * This wrapper guarantees that clerkId and email will always be present in the mapped data
 */ export const createMappingWithRequiredClerkFields = (mappingFunction)=>{
    return (clerkUser)=>{
        const mappedData = mappingFunction(clerkUser);
        return {
            ...mappedData,
            clerkId: clerkUser.id,
            email: mappedData.email || getPrimaryEmailFromJson(clerkUser)
        };
    };
};
/**
 * Extracts the primary email from Clerk user data
 */ export function getPrimaryEmail(clerkUser) {
    const primaryEmail = clerkUser.emailAddresses?.find((email)=>email.id === clerkUser.primaryEmailAddressId);
    return primaryEmail?.emailAddress || clerkUser.emailAddresses?.[0]?.emailAddress;
}
export function getPrimaryEmailFromJson(clerkUser) {
    const primaryEmail = clerkUser.email_addresses?.find((email)=>email.id === clerkUser.primary_email_address_id);
    return primaryEmail?.email_address || clerkUser.email_addresses?.[0]?.email_address;
}
/**
 * Formats a user's full name from their first and last name
 */ export function formatFullName(firstName, lastName) {
    if (!firstName && !lastName) return undefined;
    return `${firstName || ''} ${lastName || ''}`.trim();
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9jbGVyay91dGlscy9jbGVyay11c2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENsZXJrVG9QYXlsb2FkTWFwcGluZ0Z1bmN0aW9uIH0gZnJvbSAnLi4vdHlwZXMnXG5pbXBvcnQgdHlwZSB7IFVzZXIsIFVzZXJKU09OIH0gZnJvbSAnQGNsZXJrL2JhY2tlbmQnXG5cbi8qKlxuICogRGVmYXVsdCBtYXBwaW5nIGZ1bmN0aW9uIGZvciBDbGVyayB1c2VyIGRhdGEgdG8gUGF5bG9hZCBmaWVsZHNcbiAqL1xuZXhwb3J0IGNvbnN0IGRlZmF1bHRDbGVya01hcHBpbmc6IENsZXJrVG9QYXlsb2FkTWFwcGluZ0Z1bmN0aW9uID0gKGNsZXJrVXNlcjogVXNlckpTT04pID0+IHtcbiAgcmV0dXJuIHtcbiAgICBjbGVya0lkOiBjbGVya1VzZXIuaWQsXG4gICAgZW1haWw6IGdldFByaW1hcnlFbWFpbEZyb21Kc29uKGNsZXJrVXNlciksXG4gICAgZW1haWxWZXJpZmllZDogY2xlcmtVc2VyLmVtYWlsX2FkZHJlc3Nlcz8uWzBdPy52ZXJpZmljYXRpb24/LnN0YXR1cyA9PT0gJ3ZlcmlmaWVkJyxcbiAgICBmaXJzdE5hbWU6IGNsZXJrVXNlci5maXJzdF9uYW1lLFxuICAgIGxhc3ROYW1lOiBjbGVya1VzZXIubGFzdF9uYW1lLFxuICAgIGltYWdlVXJsOiBjbGVya1VzZXIuaW1hZ2VfdXJsLFxuICAgIGxhc3RTeW5jZWRBdDogbmV3IERhdGUoKSxcbiAgICBjbGVya1B1YmxpY01ldGFkYXRhOiBjbGVya1VzZXI/LnB1YmxpY19tZXRhZGF0YSB8fCB7fVxuICB9XG59XG5cbi8qKlxuICogRW5zdXJlcyB0aGF0IGVzc2VudGlhbCBDbGVyayBmaWVsZHMgYXJlIGFsd2F5cyBzZXQgcmVnYXJkbGVzcyBvZiB0aGUgbWFwcGluZyBmdW5jdGlvblxuICogVGhpcyB3cmFwcGVyIGd1YXJhbnRlZXMgdGhhdCBjbGVya0lkIGFuZCBlbWFpbCB3aWxsIGFsd2F5cyBiZSBwcmVzZW50IGluIHRoZSBtYXBwZWQgZGF0YVxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlTWFwcGluZ1dpdGhSZXF1aXJlZENsZXJrRmllbGRzID0gKG1hcHBpbmdGdW5jdGlvbjogQ2xlcmtUb1BheWxvYWRNYXBwaW5nRnVuY3Rpb24pOiBDbGVya1RvUGF5bG9hZE1hcHBpbmdGdW5jdGlvbiA9PiB7XG4gIHJldHVybiAoY2xlcmtVc2VyOiBVc2VySlNPTikgPT4ge1xuICAgIGNvbnN0IG1hcHBlZERhdGEgPSBtYXBwaW5nRnVuY3Rpb24oY2xlcmtVc2VyKVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLm1hcHBlZERhdGEsXG4gICAgICBjbGVya0lkOiBjbGVya1VzZXIuaWQsXG4gICAgICBlbWFpbDogbWFwcGVkRGF0YS5lbWFpbCB8fCBnZXRQcmltYXJ5RW1haWxGcm9tSnNvbihjbGVya1VzZXIpXG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRXh0cmFjdHMgdGhlIHByaW1hcnkgZW1haWwgZnJvbSBDbGVyayB1c2VyIGRhdGFcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFByaW1hcnlFbWFpbChjbGVya1VzZXI6IFVzZXIpOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICBjb25zdCBwcmltYXJ5RW1haWwgPSBjbGVya1VzZXIuZW1haWxBZGRyZXNzZXM/LmZpbmQoKGVtYWlsKSA9PiBlbWFpbC5pZCA9PT0gY2xlcmtVc2VyLnByaW1hcnlFbWFpbEFkZHJlc3NJZClcblxuICByZXR1cm4gcHJpbWFyeUVtYWlsPy5lbWFpbEFkZHJlc3MgfHwgY2xlcmtVc2VyLmVtYWlsQWRkcmVzc2VzPy5bMF0/LmVtYWlsQWRkcmVzc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UHJpbWFyeUVtYWlsRnJvbUpzb24oY2xlcmtVc2VyOiBVc2VySlNPTik6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIGNvbnN0IHByaW1hcnlFbWFpbCA9IGNsZXJrVXNlci5lbWFpbF9hZGRyZXNzZXM/LmZpbmQoKGVtYWlsKSA9PiBlbWFpbC5pZCA9PT0gY2xlcmtVc2VyLnByaW1hcnlfZW1haWxfYWRkcmVzc19pZClcblxuICByZXR1cm4gcHJpbWFyeUVtYWlsPy5lbWFpbF9hZGRyZXNzIHx8IGNsZXJrVXNlci5lbWFpbF9hZGRyZXNzZXM/LlswXT8uZW1haWxfYWRkcmVzc1xufVxuXG4vKipcbiAqIEZvcm1hdHMgYSB1c2VyJ3MgZnVsbCBuYW1lIGZyb20gdGhlaXIgZmlyc3QgYW5kIGxhc3QgbmFtZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZm9ybWF0RnVsbE5hbWUoZmlyc3ROYW1lPzogc3RyaW5nLCBsYXN0TmFtZT86IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG4gIGlmICghZmlyc3ROYW1lICYmICFsYXN0TmFtZSkgcmV0dXJuIHVuZGVmaW5lZFxuICByZXR1cm4gYCR7Zmlyc3ROYW1lIHx8ICcnfSAke2xhc3ROYW1lIHx8ICcnfWAudHJpbSgpXG59XG4iXSwibmFtZXMiOlsiZGVmYXVsdENsZXJrTWFwcGluZyIsImNsZXJrVXNlciIsImNsZXJrSWQiLCJpZCIsImVtYWlsIiwiZ2V0UHJpbWFyeUVtYWlsRnJvbUpzb24iLCJlbWFpbFZlcmlmaWVkIiwiZW1haWxfYWRkcmVzc2VzIiwidmVyaWZpY2F0aW9uIiwic3RhdHVzIiwiZmlyc3ROYW1lIiwiZmlyc3RfbmFtZSIsImxhc3ROYW1lIiwibGFzdF9uYW1lIiwiaW1hZ2VVcmwiLCJpbWFnZV91cmwiLCJsYXN0U3luY2VkQXQiLCJEYXRlIiwiY2xlcmtQdWJsaWNNZXRhZGF0YSIsInB1YmxpY19tZXRhZGF0YSIsImNyZWF0ZU1hcHBpbmdXaXRoUmVxdWlyZWRDbGVya0ZpZWxkcyIsIm1hcHBpbmdGdW5jdGlvbiIsIm1hcHBlZERhdGEiLCJnZXRQcmltYXJ5RW1haWwiLCJwcmltYXJ5RW1haWwiLCJlbWFpbEFkZHJlc3NlcyIsImZpbmQiLCJwcmltYXJ5RW1haWxBZGRyZXNzSWQiLCJlbWFpbEFkZHJlc3MiLCJwcmltYXJ5X2VtYWlsX2FkZHJlc3NfaWQiLCJlbWFpbF9hZGRyZXNzIiwiZm9ybWF0RnVsbE5hbWUiLCJ1bmRlZmluZWQiLCJ0cmltIl0sIm1hcHBpbmdzIjoiQUFHQTs7Q0FFQyxHQUNELE9BQU8sTUFBTUEsc0JBQXFELENBQUNDO0lBQ2pFLE9BQU87UUFDTEMsU0FBU0QsVUFBVUUsRUFBRTtRQUNyQkMsT0FBT0Msd0JBQXdCSjtRQUMvQkssZUFBZUwsVUFBVU0sZUFBZSxFQUFFLENBQUMsRUFBRSxFQUFFQyxjQUFjQyxXQUFXO1FBQ3hFQyxXQUFXVCxVQUFVVSxVQUFVO1FBQy9CQyxVQUFVWCxVQUFVWSxTQUFTO1FBQzdCQyxVQUFVYixVQUFVYyxTQUFTO1FBQzdCQyxjQUFjLElBQUlDO1FBQ2xCQyxxQkFBcUJqQixXQUFXa0IsbUJBQW1CLENBQUM7SUFDdEQ7QUFDRixFQUFDO0FBRUQ7OztDQUdDLEdBQ0QsT0FBTyxNQUFNQyx1Q0FBdUMsQ0FBQ0M7SUFDbkQsT0FBTyxDQUFDcEI7UUFDTixNQUFNcUIsYUFBYUQsZ0JBQWdCcEI7UUFFbkMsT0FBTztZQUNMLEdBQUdxQixVQUFVO1lBQ2JwQixTQUFTRCxVQUFVRSxFQUFFO1lBQ3JCQyxPQUFPa0IsV0FBV2xCLEtBQUssSUFBSUMsd0JBQXdCSjtRQUNyRDtJQUNGO0FBQ0YsRUFBQztBQUVEOztDQUVDLEdBQ0QsT0FBTyxTQUFTc0IsZ0JBQWdCdEIsU0FBZTtJQUM3QyxNQUFNdUIsZUFBZXZCLFVBQVV3QixjQUFjLEVBQUVDLEtBQUssQ0FBQ3RCLFFBQVVBLE1BQU1ELEVBQUUsS0FBS0YsVUFBVTBCLHFCQUFxQjtJQUUzRyxPQUFPSCxjQUFjSSxnQkFBZ0IzQixVQUFVd0IsY0FBYyxFQUFFLENBQUMsRUFBRSxFQUFFRztBQUN0RTtBQUVBLE9BQU8sU0FBU3ZCLHdCQUF3QkosU0FBbUI7SUFDekQsTUFBTXVCLGVBQWV2QixVQUFVTSxlQUFlLEVBQUVtQixLQUFLLENBQUN0QixRQUFVQSxNQUFNRCxFQUFFLEtBQUtGLFVBQVU0Qix3QkFBd0I7SUFFL0csT0FBT0wsY0FBY00saUJBQWlCN0IsVUFBVU0sZUFBZSxFQUFFLENBQUMsRUFBRSxFQUFFdUI7QUFDeEU7QUFFQTs7Q0FFQyxHQUNELE9BQU8sU0FBU0MsZUFBZXJCLFNBQWtCLEVBQUVFLFFBQWlCO0lBQ2xFLElBQUksQ0FBQ0YsYUFBYSxDQUFDRSxVQUFVLE9BQU9vQjtJQUNwQyxPQUFPLEdBQUd0QixhQUFhLEdBQUcsQ0FBQyxFQUFFRSxZQUFZLElBQUksQ0FBQ3FCLElBQUk7QUFDcEQifQ==