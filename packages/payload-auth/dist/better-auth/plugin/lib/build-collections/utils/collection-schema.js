import { flattenAllFields } from "payload";
export function getSchemaCollectionSlug(resolvedSchemas, model) {
    return resolvedSchemas?.[model]?.modelName ?? model;
}
export function getSchemaFieldName(resolvedSchemas, model, fieldKey) {
    return resolvedSchemas?.[model]?.fields?.[fieldKey]?.fieldName ?? fieldKey;
}
/**
 * Asserts that all field keys that exist in the schema exist in the collection
 *
 * It checks based on the custom.betterAuthFieldKey property.
 *
 * @param collection - The collection object
 * @param schema - The schema object containing field definitions
 * @throws {Error} If any required field is missing from the schema
 */ export function assertAllSchemaFields(collection, schema) {
    const schemaFieldKeys = Object.keys(schema.fields);
    const collectionConfigBetterAuthKeys = new Set(flattenAllFields(collection).map((field)=>field.custom?.betterAuthFieldKey).filter((key)=>typeof key === 'string'));
    const missingFields = schemaFieldKeys.filter((key)=>!collectionConfigBetterAuthKeys.has(key));
    if (missingFields.length === 0) return;
    throw new Error(`Missing required custom.betterAuthFieldKeys in collection "${collection.slug}": ${missingFields.join(', ')}`);
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9iZXR0ZXItYXV0aC9wbHVnaW4vbGliL2J1aWxkLWNvbGxlY3Rpb25zL3V0aWxzL2NvbGxlY3Rpb24tc2NoZW1hLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTW9kZWxLZXksIEJldHRlckF1dGhGdWxsU2NoZW1hIH0gZnJvbSAnQC9iZXR0ZXItYXV0aC9nZW5lcmF0ZWQtdHlwZXMnXG5pbXBvcnQgdHlwZSB7IEJ1aWx0QmV0dGVyQXV0aFNjaGVtYSwgQmV0dGVyQXV0aFNjaGVtYXMgfSBmcm9tICdAL2JldHRlci1hdXRoL3R5cGVzJ1xuaW1wb3J0IHsgdHlwZSBDb2xsZWN0aW9uQ29uZmlnLCBmbGF0dGVuQWxsRmllbGRzIH0gZnJvbSAncGF5bG9hZCdcblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjaGVtYUNvbGxlY3Rpb25TbHVnKHJlc29sdmVkU2NoZW1hczogQmV0dGVyQXV0aFNjaGVtYXMsIG1vZGVsOiBNb2RlbEtleSk6IHN0cmluZyB7XG4gIHJldHVybiByZXNvbHZlZFNjaGVtYXM/Llttb2RlbF0/Lm1vZGVsTmFtZSA/PyBtb2RlbFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2NoZW1hRmllbGROYW1lPE0gZXh0ZW5kcyBNb2RlbEtleT4oXG4gIHJlc29sdmVkU2NoZW1hczogQmV0dGVyQXV0aFNjaGVtYXMsXG4gIG1vZGVsOiBNLFxuICBmaWVsZEtleTogRXh0cmFjdDxrZXlvZiBCZXR0ZXJBdXRoRnVsbFNjaGVtYVtNXSwgc3RyaW5nPlxuKTogc3RyaW5nIHtcbiAgcmV0dXJuIHJlc29sdmVkU2NoZW1hcz8uW21vZGVsXT8uZmllbGRzPy5bZmllbGRLZXldPy5maWVsZE5hbWUgPz8gZmllbGRLZXlcbn1cblxuLyoqXG4gKiBBc3NlcnRzIHRoYXQgYWxsIGZpZWxkIGtleXMgdGhhdCBleGlzdCBpbiB0aGUgc2NoZW1hIGV4aXN0IGluIHRoZSBjb2xsZWN0aW9uXG4gKlxuICogSXQgY2hlY2tzIGJhc2VkIG9uIHRoZSBjdXN0b20uYmV0dGVyQXV0aEZpZWxkS2V5IHByb3BlcnR5LlxuICpcbiAqIEBwYXJhbSBjb2xsZWN0aW9uIC0gVGhlIGNvbGxlY3Rpb24gb2JqZWN0XG4gKiBAcGFyYW0gc2NoZW1hIC0gVGhlIHNjaGVtYSBvYmplY3QgY29udGFpbmluZyBmaWVsZCBkZWZpbml0aW9uc1xuICogQHRocm93cyB7RXJyb3J9IElmIGFueSByZXF1aXJlZCBmaWVsZCBpcyBtaXNzaW5nIGZyb20gdGhlIHNjaGVtYVxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRBbGxTY2hlbWFGaWVsZHMoY29sbGVjdGlvbjogQ29sbGVjdGlvbkNvbmZpZywgc2NoZW1hOiBCdWlsdEJldHRlckF1dGhTY2hlbWEpOiB2b2lkIHtcbiAgY29uc3Qgc2NoZW1hRmllbGRLZXlzID0gT2JqZWN0LmtleXMoc2NoZW1hLmZpZWxkcylcbiAgY29uc3QgY29sbGVjdGlvbkNvbmZpZ0JldHRlckF1dGhLZXlzID0gbmV3IFNldChcbiAgICBmbGF0dGVuQWxsRmllbGRzKGNvbGxlY3Rpb24pXG4gICAgICAubWFwKChmaWVsZCkgPT4gZmllbGQuY3VzdG9tPy5iZXR0ZXJBdXRoRmllbGRLZXkpXG4gICAgICAuZmlsdGVyKChrZXkpOiBrZXkgaXMgc3RyaW5nID0+IHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnKVxuICApXG5cbiAgY29uc3QgbWlzc2luZ0ZpZWxkcyA9IHNjaGVtYUZpZWxkS2V5cy5maWx0ZXIoKGtleSkgPT4gIWNvbGxlY3Rpb25Db25maWdCZXR0ZXJBdXRoS2V5cy5oYXMoa2V5KSlcbiAgaWYgKG1pc3NpbmdGaWVsZHMubGVuZ3RoID09PSAwKSByZXR1cm5cblxuICB0aHJvdyBuZXcgRXJyb3IoYE1pc3NpbmcgcmVxdWlyZWQgY3VzdG9tLmJldHRlckF1dGhGaWVsZEtleXMgaW4gY29sbGVjdGlvbiBcIiR7Y29sbGVjdGlvbi5zbHVnfVwiOiAke21pc3NpbmdGaWVsZHMuam9pbignLCAnKX1gKVxufVxuIl0sIm5hbWVzIjpbImZsYXR0ZW5BbGxGaWVsZHMiLCJnZXRTY2hlbWFDb2xsZWN0aW9uU2x1ZyIsInJlc29sdmVkU2NoZW1hcyIsIm1vZGVsIiwibW9kZWxOYW1lIiwiZ2V0U2NoZW1hRmllbGROYW1lIiwiZmllbGRLZXkiLCJmaWVsZHMiLCJmaWVsZE5hbWUiLCJhc3NlcnRBbGxTY2hlbWFGaWVsZHMiLCJjb2xsZWN0aW9uIiwic2NoZW1hIiwic2NoZW1hRmllbGRLZXlzIiwiT2JqZWN0Iiwia2V5cyIsImNvbGxlY3Rpb25Db25maWdCZXR0ZXJBdXRoS2V5cyIsIlNldCIsIm1hcCIsImZpZWxkIiwiY3VzdG9tIiwiYmV0dGVyQXV0aEZpZWxkS2V5IiwiZmlsdGVyIiwia2V5IiwibWlzc2luZ0ZpZWxkcyIsImhhcyIsImxlbmd0aCIsIkVycm9yIiwic2x1ZyIsImpvaW4iXSwibWFwcGluZ3MiOiJBQUVBLFNBQWdDQSxnQkFBZ0IsUUFBUSxVQUFTO0FBRWpFLE9BQU8sU0FBU0Msd0JBQXdCQyxlQUFrQyxFQUFFQyxLQUFlO0lBQ3pGLE9BQU9ELGlCQUFpQixDQUFDQyxNQUFNLEVBQUVDLGFBQWFEO0FBQ2hEO0FBRUEsT0FBTyxTQUFTRSxtQkFDZEgsZUFBa0MsRUFDbENDLEtBQVEsRUFDUkcsUUFBd0Q7SUFFeEQsT0FBT0osaUJBQWlCLENBQUNDLE1BQU0sRUFBRUksUUFBUSxDQUFDRCxTQUFTLEVBQUVFLGFBQWFGO0FBQ3BFO0FBRUE7Ozs7Ozs7O0NBUUMsR0FFRCxPQUFPLFNBQVNHLHNCQUFzQkMsVUFBNEIsRUFBRUMsTUFBNkI7SUFDL0YsTUFBTUMsa0JBQWtCQyxPQUFPQyxJQUFJLENBQUNILE9BQU9KLE1BQU07SUFDakQsTUFBTVEsaUNBQWlDLElBQUlDLElBQ3pDaEIsaUJBQWlCVSxZQUNkTyxHQUFHLENBQUMsQ0FBQ0MsUUFBVUEsTUFBTUMsTUFBTSxFQUFFQyxvQkFDN0JDLE1BQU0sQ0FBQyxDQUFDQyxNQUF1QixPQUFPQSxRQUFRO0lBR25ELE1BQU1DLGdCQUFnQlgsZ0JBQWdCUyxNQUFNLENBQUMsQ0FBQ0MsTUFBUSxDQUFDUCwrQkFBK0JTLEdBQUcsQ0FBQ0Y7SUFDMUYsSUFBSUMsY0FBY0UsTUFBTSxLQUFLLEdBQUc7SUFFaEMsTUFBTSxJQUFJQyxNQUFNLENBQUMsMkRBQTJELEVBQUVoQixXQUFXaUIsSUFBSSxDQUFDLEdBQUcsRUFBRUosY0FBY0ssSUFBSSxDQUFDLE9BQU87QUFDL0gifQ==