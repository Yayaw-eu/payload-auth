// See getAdditionalFieldProperties for context
const SANITIZED_FIELD_PROPERTIES = [
    'onUpdate'
];
function getRuleBasedFieldProperties({ field }, fieldRules = []) {
    return fieldRules.reduce((acc, rule)=>{
        const conditionMatch = !rule.condition || rule.condition(field);
        if (conditionMatch) {
            Object.assign(acc, rule.transform(field));
        }
        return acc;
    }, {});
}
export const getAdditionalFieldProperties = ({ field, fieldKey, fieldRules = [], additionalProperties = {} })=>{
    const ruleProps = getRuleBasedFieldProperties({
        field
    }, fieldRules);
    const specificProps = additionalProperties[fieldKey]?.(field) ?? {};
    const mergedProps = {
        ...ruleProps,
        ...specificProps
    };
    (SANITIZED_FIELD_PROPERTIES || []).forEach((name)=>{
        delete mergedProps[name];
    });
    return mergedProps;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9iZXR0ZXItYXV0aC9wbHVnaW4vbGliL2J1aWxkLWNvbGxlY3Rpb25zL3V0aWxzL21vZGVsLWZpZWxkLXRyYW5zZm9ybWF0aW9ucy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEZpZWxkQXR0cmlidXRlIH0gZnJvbSAnYmV0dGVyLWF1dGgvZGInXG5pbXBvcnQgdHlwZSB7IEZpZWxkIH0gZnJvbSAncGF5bG9hZCdcblxuLy8gU2VlIGdldEFkZGl0aW9uYWxGaWVsZFByb3BlcnRpZXMgZm9yIGNvbnRleHRcbmNvbnN0IFNBTklUSVpFRF9GSUVMRF9QUk9QRVJUSUVTID0gWydvblVwZGF0ZSddXG5cbmV4cG9ydCB0eXBlIEZpZWxkUnVsZSA9IHtcbiAgY29uZGl0aW9uPzogKGZpZWxkOiBGaWVsZEF0dHJpYnV0ZSkgPT4gYm9vbGVhblxuICB0cmFuc2Zvcm06IChmaWVsZDogRmllbGRBdHRyaWJ1dGUpID0+IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG59XG5cbnR5cGUgQWRkaXRpb25hbEZpZWxkUHJvcGVydGllcyA9IHtcbiAgW2tleTogc3RyaW5nXTogKGZpZWxkOiBGaWVsZEF0dHJpYnV0ZSkgPT4gUGFydGlhbDxGaWVsZD5cbn1cblxuZnVuY3Rpb24gZ2V0UnVsZUJhc2VkRmllbGRQcm9wZXJ0aWVzKHsgZmllbGQgfTogeyBmaWVsZDogRmllbGRBdHRyaWJ1dGUgfSwgZmllbGRSdWxlczogRmllbGRSdWxlW10gPSBbXSk6IFJlY29yZDxzdHJpbmcsIHVua25vd24+IHtcbiAgcmV0dXJuIGZpZWxkUnVsZXMucmVkdWNlPFJlY29yZDxzdHJpbmcsIHVua25vd24+PigoYWNjLCBydWxlKSA9PiB7XG4gICAgY29uc3QgY29uZGl0aW9uTWF0Y2ggPSAhcnVsZS5jb25kaXRpb24gfHwgcnVsZS5jb25kaXRpb24oZmllbGQpXG5cbiAgICBpZiAoY29uZGl0aW9uTWF0Y2gpIHtcbiAgICAgIE9iamVjdC5hc3NpZ24oYWNjLCBydWxlLnRyYW5zZm9ybShmaWVsZCkpXG4gICAgfVxuXG4gICAgcmV0dXJuIGFjY1xuICB9LCB7fSlcbn1cblxuZXhwb3J0IGNvbnN0IGdldEFkZGl0aW9uYWxGaWVsZFByb3BlcnRpZXMgPSAoe1xuICBmaWVsZCxcbiAgZmllbGRLZXksXG4gIGZpZWxkUnVsZXMgPSBbXSxcbiAgYWRkaXRpb25hbFByb3BlcnRpZXMgPSB7fVxufToge1xuICBmaWVsZDogRmllbGRBdHRyaWJ1dGVcbiAgZmllbGRLZXk6IHN0cmluZ1xuICBmaWVsZFJ1bGVzPzogRmllbGRSdWxlW11cbiAgYWRkaXRpb25hbFByb3BlcnRpZXM/OiBBZGRpdGlvbmFsRmllbGRQcm9wZXJ0aWVzXG59KTogUGFydGlhbDxGaWVsZD4gPT4ge1xuICBjb25zdCBydWxlUHJvcHMgPSBnZXRSdWxlQmFzZWRGaWVsZFByb3BlcnRpZXMoeyBmaWVsZCB9LCBmaWVsZFJ1bGVzKVxuICBjb25zdCBzcGVjaWZpY1Byb3BzID0gYWRkaXRpb25hbFByb3BlcnRpZXNbZmllbGRLZXldPy4oZmllbGQpID8/IHt9XG4gIGNvbnN0IG1lcmdlZFByb3BzID0geyAuLi5ydWxlUHJvcHMsIC4uLnNwZWNpZmljUHJvcHMgfSBhcyBQYXJ0aWFsPEZpZWxkPlxuXG4gIC8vIFBheWxvYWQgZ2VuZXJhdGVzIGEgc2FuaXRpemVkIHZlcnNpb24gb2YgaXRzIGNvbmZpZyBmb3IgcGFzc2luZyB0byB0aGUgY2xpZW50LlxuICAvLyBUaGlzIGluY2x1ZGVzIGNoZWNraW5nIGZpZWxkIHByb3BlcnRpZXMgYWdhaW5zdCBhIGxpc3Qgb2Yga25vd24gc2VydmVyLW9ubHlcbiAgLy8gcHJvcGVydHkgbmFtZXMgKHNlZSBTZXJ2ZXJPbmx5RmllbGRQcm9wZXJ0aWVzIGluIGxpbmsgYmVsb3cpLiBCZXR0ZXIgQXV0aCBtb2RlbHNcbiAgLy8gaW5jbHVkZSBmdW5jdGlvbiBwcm9wZXJ0aWVzIHRoYXQgY2Fubm90IGJlIHNlcmlhbGlzZWQgYnV0IHdob3NlIG5hbWVzIGRvIG5vdCBhcHBlYXJcbiAgLy8gaW4gUGF5bG9hZCdzIGxpc3QsIG1lYW5pbmcgdGhleSB3aWxsIHNsaXAgdGhyb3VnaCB0byB0aGUgZnJvbnRlbmQgYW5kIGdlbmVyYXRlIGFcbiAgLy8gc2VyaWFsaXphdGlvbiBlcnJvci4gV2UgdGhlcmVmb3JlIG5lZWQgdG8gc3RyaXAgdGhlbSBvdXQgaGVyZS5cbiAgLy8gV2UgY291bGQgc3RyaXAgb3V0IGFsbCBmdW5jdGlvbiBwcm9wZXJ0aWVzIHRvIG1ha2UgdGhpcyBmdWxseSBmdXR1cmUgcHJvb2YsIGJ1dCB0aGVyZVxuICAvLyBhcmUgc29tZSBsaWtlIGRlZmF1bHRWYWx1ZSB0aGF0IFBheWxvYWQgYWxyZWFkeSBoYW5kbGVzIHRoYXQgd2UgZG9uJ3Qgd2FudCB0byBsb3NlLFxuICAvLyBzbyBhIG1vcmUgc3VyZ2ljYWwsIHRhcmdldGVkIGFwcHJvYWNoIHNlZW1zIG1vcmUgYXBwcm9wcmlhdGUuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXlsb2FkY21zL3BheWxvYWQvYmxvYi9tYWluL3BhY2thZ2VzL3BheWxvYWQvc3JjL2ZpZWxkcy9jb25maWcvY2xpZW50LnRzXG4gIDsoU0FOSVRJWkVEX0ZJRUxEX1BST1BFUlRJRVMgfHwgW10pLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICBkZWxldGUgbWVyZ2VkUHJvcHNbbmFtZSBhcyBrZXlvZiBGaWVsZF1cbiAgfSlcblxuICByZXR1cm4gbWVyZ2VkUHJvcHNcbn1cbiJdLCJuYW1lcyI6WyJTQU5JVElaRURfRklFTERfUFJPUEVSVElFUyIsImdldFJ1bGVCYXNlZEZpZWxkUHJvcGVydGllcyIsImZpZWxkIiwiZmllbGRSdWxlcyIsInJlZHVjZSIsImFjYyIsInJ1bGUiLCJjb25kaXRpb25NYXRjaCIsImNvbmRpdGlvbiIsIk9iamVjdCIsImFzc2lnbiIsInRyYW5zZm9ybSIsImdldEFkZGl0aW9uYWxGaWVsZFByb3BlcnRpZXMiLCJmaWVsZEtleSIsImFkZGl0aW9uYWxQcm9wZXJ0aWVzIiwicnVsZVByb3BzIiwic3BlY2lmaWNQcm9wcyIsIm1lcmdlZFByb3BzIiwiZm9yRWFjaCIsIm5hbWUiXSwibWFwcGluZ3MiOiJBQUdBLCtDQUErQztBQUMvQyxNQUFNQSw2QkFBNkI7SUFBQztDQUFXO0FBVy9DLFNBQVNDLDRCQUE0QixFQUFFQyxLQUFLLEVBQTZCLEVBQUVDLGFBQTBCLEVBQUU7SUFDckcsT0FBT0EsV0FBV0MsTUFBTSxDQUEwQixDQUFDQyxLQUFLQztRQUN0RCxNQUFNQyxpQkFBaUIsQ0FBQ0QsS0FBS0UsU0FBUyxJQUFJRixLQUFLRSxTQUFTLENBQUNOO1FBRXpELElBQUlLLGdCQUFnQjtZQUNsQkUsT0FBT0MsTUFBTSxDQUFDTCxLQUFLQyxLQUFLSyxTQUFTLENBQUNUO1FBQ3BDO1FBRUEsT0FBT0c7SUFDVCxHQUFHLENBQUM7QUFDTjtBQUVBLE9BQU8sTUFBTU8sK0JBQStCLENBQUMsRUFDM0NWLEtBQUssRUFDTFcsUUFBUSxFQUNSVixhQUFhLEVBQUUsRUFDZlcsdUJBQXVCLENBQUMsQ0FBQyxFQU0xQjtJQUNDLE1BQU1DLFlBQVlkLDRCQUE0QjtRQUFFQztJQUFNLEdBQUdDO0lBQ3pELE1BQU1hLGdCQUFnQkYsb0JBQW9CLENBQUNELFNBQVMsR0FBR1gsVUFBVSxDQUFDO0lBQ2xFLE1BQU1lLGNBQWM7UUFBRSxHQUFHRixTQUFTO1FBQUUsR0FBR0MsYUFBYTtJQUFDO0lBWW5EaEIsQ0FBQUEsOEJBQThCLEVBQUUsQUFBRCxFQUFHa0IsT0FBTyxDQUFDLENBQUNDO1FBQzNDLE9BQU9GLFdBQVcsQ0FBQ0UsS0FBb0I7SUFDekM7SUFFQSxPQUFPRjtBQUNULEVBQUMifQ==