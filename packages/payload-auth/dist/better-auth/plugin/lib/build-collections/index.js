import { baModelKey, baseSlugs } from "../../constants";
import { buildAccountsCollection } from "./accounts/index";
import { buildAdminInvitationsCollection } from "./admin-invitations";
import { buildApiKeysCollection } from "./api-keys";
import { buildInvitationsCollection } from "./invitations";
import { buildJwksCollection } from "./jwks";
import { buildMembersCollection } from "./members";
import { buildOauthAccessTokensCollection } from "./oauth-access-tokens";
import { buildOauthApplicationsCollection } from "./oauth-applications";
import { buildOauthConsentsCollection } from "./oauth-consents";
import { buildOrganizationsCollection } from "./organizations";
import { buildPasskeysCollection } from "./passkeys";
import { buildSessionsCollection } from "./sessions";
import { buildSsoProvidersCollection } from "./sso-providers";
import { buildSubscriptionsCollection } from "./subscriptions";
import { buildTeamsCollection } from "./teams";
import { buildTeamMembersCollection } from "./team-members";
import { buildTwoFactorsCollection } from "./two-factors";
import { buildUsersCollection } from "./users/index";
import { getSchemaCollectionSlug } from "./utils/collection-schema";
import { buildVerificationsCollection } from "./verifications";
/**
 * Builds the required collections based on the BetterAuth options and plugins
 */ export function buildCollections({ incomingCollections, pluginOptions, resolvedSchemas }) {
    const collectionBuilders = {
        [baModelKey.user]: (props)=>buildUsersCollection(props),
        [baModelKey.account]: (props)=>buildAccountsCollection(props),
        [baModelKey.session]: (props)=>buildSessionsCollection(props),
        [baModelKey.verification]: (props)=>buildVerificationsCollection(props),
        [baModelKey.organization]: (props)=>buildOrganizationsCollection(props),
        [baModelKey.member]: (props)=>buildMembersCollection(props),
        [baModelKey.invitation]: (props)=>buildInvitationsCollection(props),
        [baModelKey.team]: (props)=>buildTeamsCollection(props),
        [baModelKey.teamMember]: (props)=>buildTeamMembersCollection(props),
        [baModelKey.jwks]: (props)=>buildJwksCollection(props),
        [baModelKey.apikey]: (props)=>buildApiKeysCollection(props),
        [baModelKey.twoFactor]: (props)=>buildTwoFactorsCollection(props),
        [baModelKey.oauthAccessToken]: (props)=>buildOauthAccessTokensCollection(props),
        [baModelKey.oauthApplication]: (props)=>buildOauthApplicationsCollection(props),
        [baModelKey.oauthConsent]: (props)=>buildOauthConsentsCollection(props),
        [baModelKey.passkey]: (props)=>buildPasskeysCollection(props),
        [baModelKey.ssoProvider]: (props)=>buildSsoProvidersCollection(props),
        [baModelKey.subscription]: (props)=>buildSubscriptionsCollection(props)
    };
    const collectionMap = {};
    for (const modelKey of Object.keys(resolvedSchemas)){
        const collectionSlug = getSchemaCollectionSlug(resolvedSchemas, modelKey);
        const builder = collectionBuilders[modelKey];
        if (!builder) continue;
        collectionMap[collectionSlug] = builder({
            incomingCollections,
            pluginOptions,
            resolvedSchemas
        });
    }
    // Add adminInvitations collection as it's not in the collectionSchemaMap
    const adminInvitationsSlug = pluginOptions.adminInvitations?.slug ?? baseSlugs.adminInvitations;
    collectionMap[adminInvitationsSlug] = buildAdminInvitationsCollection({
        incomingCollections,
        pluginOptions
    });
    // Then add incoming collections that don't conflict with required ones
    incomingCollections.forEach((c)=>{
        if (!collectionMap[c.slug]) {
            collectionMap[c.slug] = c;
        }
    });
    return collectionMap;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9iZXR0ZXItYXV0aC9wbHVnaW4vbGliL2J1aWxkLWNvbGxlY3Rpb25zL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTW9kZWxLZXkgfSBmcm9tICdAL2JldHRlci1hdXRoL2dlbmVyYXRlZC10eXBlcydcbmltcG9ydCB0eXBlIHsgQ29sbGVjdGlvbkNvbmZpZyB9IGZyb20gJ3BheWxvYWQnXG5pbXBvcnQgeyBiYU1vZGVsS2V5LCBiYXNlU2x1Z3MgfSBmcm9tICcuLi8uLi9jb25zdGFudHMnXG5pbXBvcnQgdHlwZSB7IEJldHRlckF1dGhQbHVnaW5PcHRpb25zLCBCdWlsZENvbGxlY3Rpb25Qcm9wcywgQmV0dGVyQXV0aFNjaGVtYXMgfSBmcm9tICcuLi8uLi90eXBlcydcbmltcG9ydCB7IGJ1aWxkQWNjb3VudHNDb2xsZWN0aW9uIH0gZnJvbSAnLi9hY2NvdW50cy9pbmRleCdcbmltcG9ydCB7IGJ1aWxkQWRtaW5JbnZpdGF0aW9uc0NvbGxlY3Rpb24gfSBmcm9tICcuL2FkbWluLWludml0YXRpb25zJ1xuaW1wb3J0IHsgYnVpbGRBcGlLZXlzQ29sbGVjdGlvbiB9IGZyb20gJy4vYXBpLWtleXMnXG5pbXBvcnQgeyBidWlsZEludml0YXRpb25zQ29sbGVjdGlvbiB9IGZyb20gJy4vaW52aXRhdGlvbnMnXG5pbXBvcnQgeyBidWlsZEp3a3NDb2xsZWN0aW9uIH0gZnJvbSAnLi9qd2tzJ1xuaW1wb3J0IHsgYnVpbGRNZW1iZXJzQ29sbGVjdGlvbiB9IGZyb20gJy4vbWVtYmVycydcbmltcG9ydCB7IGJ1aWxkT2F1dGhBY2Nlc3NUb2tlbnNDb2xsZWN0aW9uIH0gZnJvbSAnLi9vYXV0aC1hY2Nlc3MtdG9rZW5zJ1xuaW1wb3J0IHsgYnVpbGRPYXV0aEFwcGxpY2F0aW9uc0NvbGxlY3Rpb24gfSBmcm9tICcuL29hdXRoLWFwcGxpY2F0aW9ucydcbmltcG9ydCB7IGJ1aWxkT2F1dGhDb25zZW50c0NvbGxlY3Rpb24gfSBmcm9tICcuL29hdXRoLWNvbnNlbnRzJ1xuaW1wb3J0IHsgYnVpbGRPcmdhbml6YXRpb25zQ29sbGVjdGlvbiB9IGZyb20gJy4vb3JnYW5pemF0aW9ucydcbmltcG9ydCB7IGJ1aWxkUGFzc2tleXNDb2xsZWN0aW9uIH0gZnJvbSAnLi9wYXNza2V5cydcbmltcG9ydCB7IGJ1aWxkU2Vzc2lvbnNDb2xsZWN0aW9uIH0gZnJvbSAnLi9zZXNzaW9ucydcbmltcG9ydCB7IGJ1aWxkU3NvUHJvdmlkZXJzQ29sbGVjdGlvbiB9IGZyb20gJy4vc3NvLXByb3ZpZGVycydcbmltcG9ydCB7IGJ1aWxkU3Vic2NyaXB0aW9uc0NvbGxlY3Rpb24gfSBmcm9tICcuL3N1YnNjcmlwdGlvbnMnXG5pbXBvcnQgeyBidWlsZFRlYW1zQ29sbGVjdGlvbiB9IGZyb20gJy4vdGVhbXMnXG5pbXBvcnQgeyBidWlsZFRlYW1NZW1iZXJzQ29sbGVjdGlvbiB9IGZyb20gJy4vdGVhbS1tZW1iZXJzJ1xuaW1wb3J0IHsgYnVpbGRUd29GYWN0b3JzQ29sbGVjdGlvbiB9IGZyb20gJy4vdHdvLWZhY3RvcnMnXG5pbXBvcnQgeyBidWlsZFVzZXJzQ29sbGVjdGlvbiB9IGZyb20gJy4vdXNlcnMvaW5kZXgnXG5pbXBvcnQgeyBnZXRTY2hlbWFDb2xsZWN0aW9uU2x1ZyB9IGZyb20gJy4vdXRpbHMvY29sbGVjdGlvbi1zY2hlbWEnXG5pbXBvcnQgeyBidWlsZFZlcmlmaWNhdGlvbnNDb2xsZWN0aW9uIH0gZnJvbSAnLi92ZXJpZmljYXRpb25zJ1xuXG4vKipcbiAqIEJ1aWxkcyB0aGUgcmVxdWlyZWQgY29sbGVjdGlvbnMgYmFzZWQgb24gdGhlIEJldHRlckF1dGggb3B0aW9ucyBhbmQgcGx1Z2luc1xuICovXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRDb2xsZWN0aW9ucyh7XG4gIGluY29taW5nQ29sbGVjdGlvbnMsXG4gIHBsdWdpbk9wdGlvbnMsXG4gIHJlc29sdmVkU2NoZW1hc1xufToge1xuICBpbmNvbWluZ0NvbGxlY3Rpb25zOiBDb2xsZWN0aW9uQ29uZmlnW11cbiAgcGx1Z2luT3B0aW9uczogQmV0dGVyQXV0aFBsdWdpbk9wdGlvbnNcbiAgcmVzb2x2ZWRTY2hlbWFzOiBCZXR0ZXJBdXRoU2NoZW1hc1xufSk6IFJlY29yZDxzdHJpbmcsIENvbGxlY3Rpb25Db25maWc+IHtcbiAgY29uc3QgY29sbGVjdGlvbkJ1aWxkZXJzOiBSZWNvcmQ8TW9kZWxLZXksIChwcm9wczogQnVpbGRDb2xsZWN0aW9uUHJvcHMpID0+IENvbGxlY3Rpb25Db25maWc+ID0ge1xuICAgIFtiYU1vZGVsS2V5LnVzZXJdOiAocHJvcHM6IEJ1aWxkQ29sbGVjdGlvblByb3BzKSA9PiBidWlsZFVzZXJzQ29sbGVjdGlvbihwcm9wcyksXG4gICAgW2JhTW9kZWxLZXkuYWNjb3VudF06IChwcm9wczogQnVpbGRDb2xsZWN0aW9uUHJvcHMpID0+IGJ1aWxkQWNjb3VudHNDb2xsZWN0aW9uKHByb3BzKSxcbiAgICBbYmFNb2RlbEtleS5zZXNzaW9uXTogKHByb3BzOiBCdWlsZENvbGxlY3Rpb25Qcm9wcykgPT4gYnVpbGRTZXNzaW9uc0NvbGxlY3Rpb24ocHJvcHMpLFxuICAgIFtiYU1vZGVsS2V5LnZlcmlmaWNhdGlvbl06IChwcm9wczogQnVpbGRDb2xsZWN0aW9uUHJvcHMpID0+IGJ1aWxkVmVyaWZpY2F0aW9uc0NvbGxlY3Rpb24ocHJvcHMpLFxuICAgIFtiYU1vZGVsS2V5Lm9yZ2FuaXphdGlvbl06IChwcm9wczogQnVpbGRDb2xsZWN0aW9uUHJvcHMpID0+IGJ1aWxkT3JnYW5pemF0aW9uc0NvbGxlY3Rpb24ocHJvcHMpLFxuICAgIFtiYU1vZGVsS2V5Lm1lbWJlcl06IChwcm9wczogQnVpbGRDb2xsZWN0aW9uUHJvcHMpID0+IGJ1aWxkTWVtYmVyc0NvbGxlY3Rpb24ocHJvcHMpLFxuICAgIFtiYU1vZGVsS2V5Lmludml0YXRpb25dOiAocHJvcHM6IEJ1aWxkQ29sbGVjdGlvblByb3BzKSA9PiBidWlsZEludml0YXRpb25zQ29sbGVjdGlvbihwcm9wcyksXG4gICAgW2JhTW9kZWxLZXkudGVhbV06IChwcm9wczogQnVpbGRDb2xsZWN0aW9uUHJvcHMpID0+IGJ1aWxkVGVhbXNDb2xsZWN0aW9uKHByb3BzKSxcbiAgICBbYmFNb2RlbEtleS50ZWFtTWVtYmVyXTogKHByb3BzOiBCdWlsZENvbGxlY3Rpb25Qcm9wcykgPT4gYnVpbGRUZWFtTWVtYmVyc0NvbGxlY3Rpb24ocHJvcHMpLFxuICAgIFtiYU1vZGVsS2V5Lmp3a3NdOiAocHJvcHM6IEJ1aWxkQ29sbGVjdGlvblByb3BzKSA9PiBidWlsZEp3a3NDb2xsZWN0aW9uKHByb3BzKSxcbiAgICBbYmFNb2RlbEtleS5hcGlrZXldOiAocHJvcHM6IEJ1aWxkQ29sbGVjdGlvblByb3BzKSA9PiBidWlsZEFwaUtleXNDb2xsZWN0aW9uKHByb3BzKSxcbiAgICBbYmFNb2RlbEtleS50d29GYWN0b3JdOiAocHJvcHM6IEJ1aWxkQ29sbGVjdGlvblByb3BzKSA9PiBidWlsZFR3b0ZhY3RvcnNDb2xsZWN0aW9uKHByb3BzKSxcbiAgICBbYmFNb2RlbEtleS5vYXV0aEFjY2Vzc1Rva2VuXTogKHByb3BzOiBCdWlsZENvbGxlY3Rpb25Qcm9wcykgPT4gYnVpbGRPYXV0aEFjY2Vzc1Rva2Vuc0NvbGxlY3Rpb24ocHJvcHMpLFxuICAgIFtiYU1vZGVsS2V5Lm9hdXRoQXBwbGljYXRpb25dOiAocHJvcHM6IEJ1aWxkQ29sbGVjdGlvblByb3BzKSA9PiBidWlsZE9hdXRoQXBwbGljYXRpb25zQ29sbGVjdGlvbihwcm9wcyksXG4gICAgW2JhTW9kZWxLZXkub2F1dGhDb25zZW50XTogKHByb3BzOiBCdWlsZENvbGxlY3Rpb25Qcm9wcykgPT4gYnVpbGRPYXV0aENvbnNlbnRzQ29sbGVjdGlvbihwcm9wcyksXG4gICAgW2JhTW9kZWxLZXkucGFzc2tleV06IChwcm9wczogQnVpbGRDb2xsZWN0aW9uUHJvcHMpID0+IGJ1aWxkUGFzc2tleXNDb2xsZWN0aW9uKHByb3BzKSxcbiAgICBbYmFNb2RlbEtleS5zc29Qcm92aWRlcl06IChwcm9wczogQnVpbGRDb2xsZWN0aW9uUHJvcHMpID0+IGJ1aWxkU3NvUHJvdmlkZXJzQ29sbGVjdGlvbihwcm9wcyksXG4gICAgW2JhTW9kZWxLZXkuc3Vic2NyaXB0aW9uXTogKHByb3BzOiBCdWlsZENvbGxlY3Rpb25Qcm9wcykgPT4gYnVpbGRTdWJzY3JpcHRpb25zQ29sbGVjdGlvbihwcm9wcylcbiAgfVxuXG4gIGNvbnN0IGNvbGxlY3Rpb25NYXA6IFJlY29yZDxzdHJpbmcsIENvbGxlY3Rpb25Db25maWc+ID0ge31cbiAgZm9yIChjb25zdCBtb2RlbEtleSBvZiBPYmplY3Qua2V5cyhyZXNvbHZlZFNjaGVtYXMpIGFzIE1vZGVsS2V5W10pIHtcbiAgICBjb25zdCBjb2xsZWN0aW9uU2x1ZyA9IGdldFNjaGVtYUNvbGxlY3Rpb25TbHVnKHJlc29sdmVkU2NoZW1hcywgbW9kZWxLZXkpXG4gICAgY29uc3QgYnVpbGRlciA9IGNvbGxlY3Rpb25CdWlsZGVyc1ttb2RlbEtleV1cbiAgICBpZiAoIWJ1aWxkZXIpIGNvbnRpbnVlXG4gICAgY29sbGVjdGlvbk1hcFtjb2xsZWN0aW9uU2x1Z10gPSBidWlsZGVyKHtcbiAgICAgIGluY29taW5nQ29sbGVjdGlvbnMsXG4gICAgICBwbHVnaW5PcHRpb25zLFxuICAgICAgcmVzb2x2ZWRTY2hlbWFzXG4gICAgfSlcbiAgfVxuXG4gIC8vIEFkZCBhZG1pbkludml0YXRpb25zIGNvbGxlY3Rpb24gYXMgaXQncyBub3QgaW4gdGhlIGNvbGxlY3Rpb25TY2hlbWFNYXBcbiAgY29uc3QgYWRtaW5JbnZpdGF0aW9uc1NsdWcgPSBwbHVnaW5PcHRpb25zLmFkbWluSW52aXRhdGlvbnM/LnNsdWcgPz8gYmFzZVNsdWdzLmFkbWluSW52aXRhdGlvbnNcbiAgY29sbGVjdGlvbk1hcFthZG1pbkludml0YXRpb25zU2x1Z10gPSBidWlsZEFkbWluSW52aXRhdGlvbnNDb2xsZWN0aW9uKHtcbiAgICBpbmNvbWluZ0NvbGxlY3Rpb25zLFxuICAgIHBsdWdpbk9wdGlvbnNcbiAgfSlcblxuICAvLyBUaGVuIGFkZCBpbmNvbWluZyBjb2xsZWN0aW9ucyB0aGF0IGRvbid0IGNvbmZsaWN0IHdpdGggcmVxdWlyZWQgb25lc1xuICBpbmNvbWluZ0NvbGxlY3Rpb25zLmZvckVhY2goKGMpID0+IHtcbiAgICBpZiAoIWNvbGxlY3Rpb25NYXBbYy5zbHVnXSkge1xuICAgICAgY29sbGVjdGlvbk1hcFtjLnNsdWddID0gY1xuICAgIH1cbiAgfSlcblxuICByZXR1cm4gY29sbGVjdGlvbk1hcFxufVxuIl0sIm5hbWVzIjpbImJhTW9kZWxLZXkiLCJiYXNlU2x1Z3MiLCJidWlsZEFjY291bnRzQ29sbGVjdGlvbiIsImJ1aWxkQWRtaW5JbnZpdGF0aW9uc0NvbGxlY3Rpb24iLCJidWlsZEFwaUtleXNDb2xsZWN0aW9uIiwiYnVpbGRJbnZpdGF0aW9uc0NvbGxlY3Rpb24iLCJidWlsZEp3a3NDb2xsZWN0aW9uIiwiYnVpbGRNZW1iZXJzQ29sbGVjdGlvbiIsImJ1aWxkT2F1dGhBY2Nlc3NUb2tlbnNDb2xsZWN0aW9uIiwiYnVpbGRPYXV0aEFwcGxpY2F0aW9uc0NvbGxlY3Rpb24iLCJidWlsZE9hdXRoQ29uc2VudHNDb2xsZWN0aW9uIiwiYnVpbGRPcmdhbml6YXRpb25zQ29sbGVjdGlvbiIsImJ1aWxkUGFzc2tleXNDb2xsZWN0aW9uIiwiYnVpbGRTZXNzaW9uc0NvbGxlY3Rpb24iLCJidWlsZFNzb1Byb3ZpZGVyc0NvbGxlY3Rpb24iLCJidWlsZFN1YnNjcmlwdGlvbnNDb2xsZWN0aW9uIiwiYnVpbGRUZWFtc0NvbGxlY3Rpb24iLCJidWlsZFRlYW1NZW1iZXJzQ29sbGVjdGlvbiIsImJ1aWxkVHdvRmFjdG9yc0NvbGxlY3Rpb24iLCJidWlsZFVzZXJzQ29sbGVjdGlvbiIsImdldFNjaGVtYUNvbGxlY3Rpb25TbHVnIiwiYnVpbGRWZXJpZmljYXRpb25zQ29sbGVjdGlvbiIsImJ1aWxkQ29sbGVjdGlvbnMiLCJpbmNvbWluZ0NvbGxlY3Rpb25zIiwicGx1Z2luT3B0aW9ucyIsInJlc29sdmVkU2NoZW1hcyIsImNvbGxlY3Rpb25CdWlsZGVycyIsInVzZXIiLCJwcm9wcyIsImFjY291bnQiLCJzZXNzaW9uIiwidmVyaWZpY2F0aW9uIiwib3JnYW5pemF0aW9uIiwibWVtYmVyIiwiaW52aXRhdGlvbiIsInRlYW0iLCJ0ZWFtTWVtYmVyIiwiandrcyIsImFwaWtleSIsInR3b0ZhY3RvciIsIm9hdXRoQWNjZXNzVG9rZW4iLCJvYXV0aEFwcGxpY2F0aW9uIiwib2F1dGhDb25zZW50IiwicGFzc2tleSIsInNzb1Byb3ZpZGVyIiwic3Vic2NyaXB0aW9uIiwiY29sbGVjdGlvbk1hcCIsIm1vZGVsS2V5IiwiT2JqZWN0Iiwia2V5cyIsImNvbGxlY3Rpb25TbHVnIiwiYnVpbGRlciIsImFkbWluSW52aXRhdGlvbnNTbHVnIiwiYWRtaW5JbnZpdGF0aW9ucyIsInNsdWciLCJmb3JFYWNoIiwiYyJdLCJtYXBwaW5ncyI6IkFBRUEsU0FBU0EsVUFBVSxFQUFFQyxTQUFTLFFBQVEsa0JBQWlCO0FBRXZELFNBQVNDLHVCQUF1QixRQUFRLG1CQUFrQjtBQUMxRCxTQUFTQywrQkFBK0IsUUFBUSxzQkFBcUI7QUFDckUsU0FBU0Msc0JBQXNCLFFBQVEsYUFBWTtBQUNuRCxTQUFTQywwQkFBMEIsUUFBUSxnQkFBZTtBQUMxRCxTQUFTQyxtQkFBbUIsUUFBUSxTQUFRO0FBQzVDLFNBQVNDLHNCQUFzQixRQUFRLFlBQVc7QUFDbEQsU0FBU0MsZ0NBQWdDLFFBQVEsd0JBQXVCO0FBQ3hFLFNBQVNDLGdDQUFnQyxRQUFRLHVCQUFzQjtBQUN2RSxTQUFTQyw0QkFBNEIsUUFBUSxtQkFBa0I7QUFDL0QsU0FBU0MsNEJBQTRCLFFBQVEsa0JBQWlCO0FBQzlELFNBQVNDLHVCQUF1QixRQUFRLGFBQVk7QUFDcEQsU0FBU0MsdUJBQXVCLFFBQVEsYUFBWTtBQUNwRCxTQUFTQywyQkFBMkIsUUFBUSxrQkFBaUI7QUFDN0QsU0FBU0MsNEJBQTRCLFFBQVEsa0JBQWlCO0FBQzlELFNBQVNDLG9CQUFvQixR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