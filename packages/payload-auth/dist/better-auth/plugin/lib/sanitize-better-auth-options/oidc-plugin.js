import { baModelFieldKeys, baModelKey } from "../../constants";
import { set } from "../../utils/set";
import { getSchemaCollectionSlug, getSchemaFieldName } from "../build-collections/utils/collection-schema";
export function configureOidcPlugin(plugin, resolvedSchemas) {
    const models = [
        baModelKey.oauthApplication,
        baModelKey.oauthAccessToken,
        baModelKey.oauthConsent
    ];
    models.forEach((model)=>set(plugin, `schema.${model}.modelName`, getSchemaCollectionSlug(resolvedSchemas, model)));
    set(plugin, `schema.${baModelKey.oauthApplication}.fields.userId.fieldName`, getSchemaFieldName(resolvedSchemas, baModelKey.oauthApplication, baModelFieldKeys.oauthApplication.userId));
    set(plugin, `schema.${baModelKey.oauthAccessToken}.fields.userId.fieldName`, getSchemaFieldName(resolvedSchemas, baModelKey.oauthAccessToken, baModelFieldKeys.oauthAccessToken.userId));
    set(plugin, `schema.${baModelKey.oauthAccessToken}.fields.clientId.fieldName`, getSchemaFieldName(resolvedSchemas, baModelKey.oauthAccessToken, baModelFieldKeys.oauthAccessToken.clientId));
    set(plugin, `schema.${baModelKey.oauthConsent}.fields.userId.fieldName`, getSchemaFieldName(resolvedSchemas, baModelKey.oauthConsent, baModelFieldKeys.oauthConsent.userId));
    set(plugin, `schema.${baModelKey.oauthConsent}.fields.clientId.fieldName`, getSchemaFieldName(resolvedSchemas, baModelKey.oauthConsent, baModelFieldKeys.oauthConsent.clientId));
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9iZXR0ZXItYXV0aC9wbHVnaW4vbGliL3Nhbml0aXplLWJldHRlci1hdXRoLW9wdGlvbnMvb2lkYy1wbHVnaW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYmFNb2RlbEZpZWxkS2V5cywgYmFNb2RlbEtleSB9IGZyb20gJ0AvYmV0dGVyLWF1dGgvcGx1Z2luL2NvbnN0YW50cydcbmltcG9ydCB7IHNldCB9IGZyb20gJy4uLy4uL3V0aWxzL3NldCdcbmltcG9ydCB7IGdldFNjaGVtYUNvbGxlY3Rpb25TbHVnLCBnZXRTY2hlbWFGaWVsZE5hbWUgfSBmcm9tICcuLi9idWlsZC1jb2xsZWN0aW9ucy91dGlscy9jb2xsZWN0aW9uLXNjaGVtYSdcbmltcG9ydCB0eXBlIHsgQmV0dGVyQXV0aFNjaGVtYXMgfSBmcm9tICdAL2JldHRlci1hdXRoL3R5cGVzJ1xuXG5leHBvcnQgZnVuY3Rpb24gY29uZmlndXJlT2lkY1BsdWdpbihwbHVnaW46IGFueSwgcmVzb2x2ZWRTY2hlbWFzOiBCZXR0ZXJBdXRoU2NoZW1hcyk6IHZvaWQge1xuICBjb25zdCBtb2RlbHMgPSBbXG4gICAgYmFNb2RlbEtleS5vYXV0aEFwcGxpY2F0aW9uLFxuICAgIGJhTW9kZWxLZXkub2F1dGhBY2Nlc3NUb2tlbixcbiAgICBiYU1vZGVsS2V5Lm9hdXRoQ29uc2VudCxcbiAgXSBhcyBjb25zdFxuXG4gIG1vZGVscy5mb3JFYWNoKChtb2RlbCkgPT4gc2V0KHBsdWdpbiwgYHNjaGVtYS4ke21vZGVsfS5tb2RlbE5hbWVgLCBnZXRTY2hlbWFDb2xsZWN0aW9uU2x1ZyhyZXNvbHZlZFNjaGVtYXMsIG1vZGVsKSkpXG5cbiAgc2V0KHBsdWdpbiwgYHNjaGVtYS4ke2JhTW9kZWxLZXkub2F1dGhBcHBsaWNhdGlvbn0uZmllbGRzLnVzZXJJZC5maWVsZE5hbWVgLCBnZXRTY2hlbWFGaWVsZE5hbWUocmVzb2x2ZWRTY2hlbWFzLCBiYU1vZGVsS2V5Lm9hdXRoQXBwbGljYXRpb24sIGJhTW9kZWxGaWVsZEtleXMub2F1dGhBcHBsaWNhdGlvbi51c2VySWQpKVxuXG4gIHNldChwbHVnaW4sIGBzY2hlbWEuJHtiYU1vZGVsS2V5Lm9hdXRoQWNjZXNzVG9rZW59LmZpZWxkcy51c2VySWQuZmllbGROYW1lYCwgZ2V0U2NoZW1hRmllbGROYW1lKHJlc29sdmVkU2NoZW1hcywgYmFNb2RlbEtleS5vYXV0aEFjY2Vzc1Rva2VuLCBiYU1vZGVsRmllbGRLZXlzLm9hdXRoQWNjZXNzVG9rZW4udXNlcklkKSlcbiAgc2V0KHBsdWdpbiwgYHNjaGVtYS4ke2JhTW9kZWxLZXkub2F1dGhBY2Nlc3NUb2tlbn0uZmllbGRzLmNsaWVudElkLmZpZWxkTmFtZWAsIGdldFNjaGVtYUZpZWxkTmFtZShyZXNvbHZlZFNjaGVtYXMsIGJhTW9kZWxLZXkub2F1dGhBY2Nlc3NUb2tlbiwgYmFNb2RlbEZpZWxkS2V5cy5vYXV0aEFjY2Vzc1Rva2VuLmNsaWVudElkKSlcblxuICBzZXQocGx1Z2luLCBgc2NoZW1hLiR7YmFNb2RlbEtleS5vYXV0aENvbnNlbnR9LmZpZWxkcy51c2VySWQuZmllbGROYW1lYCwgZ2V0U2NoZW1hRmllbGROYW1lKHJlc29sdmVkU2NoZW1hcywgYmFNb2RlbEtleS5vYXV0aENvbnNlbnQsIGJhTW9kZWxGaWVsZEtleXMub2F1dGhDb25zZW50LnVzZXJJZCkpXG4gIHNldChwbHVnaW4sIGBzY2hlbWEuJHtiYU1vZGVsS2V5Lm9hdXRoQ29uc2VudH0uZmllbGRzLmNsaWVudElkLmZpZWxkTmFtZWAsIGdldFNjaGVtYUZpZWxkTmFtZShyZXNvbHZlZFNjaGVtYXMsIGJhTW9kZWxLZXkub2F1dGhDb25zZW50LCBiYU1vZGVsRmllbGRLZXlzLm9hdXRoQ29uc2VudC5jbGllbnRJZCkpXG59XG4iXSwibmFtZXMiOlsiYmFNb2RlbEZpZWxkS2V5cyIsImJhTW9kZWxLZXkiLCJzZXQiLCJnZXRTY2hlbWFDb2xsZWN0aW9uU2x1ZyIsImdldFNjaGVtYUZpZWxkTmFtZSIsImNvbmZpZ3VyZU9pZGNQbHVnaW4iLCJwbHVnaW4iLCJyZXNvbHZlZFNjaGVtYXMiLCJtb2RlbHMiLCJvYXV0aEFwcGxpY2F0aW9uIiwib2F1dGhBY2Nlc3NUb2tlbiIsIm9hdXRoQ29uc2VudCIsImZvckVhY2giLCJtb2RlbCIsInVzZXJJZCIsImNsaWVudElkIl0sIm1hcHBpbmdzIjoiQUFBQSxTQUFTQSxnQkFBZ0IsRUFBRUMsVUFBVSxRQUFRLGtCQUFnQztBQUM3RSxTQUFTQyxHQUFHLFFBQVEsa0JBQWlCO0FBQ3JDLFNBQVNDLHVCQUF1QixFQUFFQyxrQkFBa0IsUUFBUSwrQ0FBOEM7QUFHMUcsT0FBTyxTQUFTQyxvQkFBb0JDLE1BQVcsRUFBRUMsZUFBa0M7SUFDakYsTUFBTUMsU0FBUztRQUNiUCxXQUFXUSxnQkFBZ0I7UUFDM0JSLFdBQVdTLGdCQUFnQjtRQUMzQlQsV0FBV1UsWUFBWTtLQUN4QjtJQUVESCxPQUFPSSxPQUFPLENBQUMsQ0FBQ0MsUUFBVVgsSUFBSUksUUFBUSxDQUFDLE9BQU8sRUFBRU8sTUFBTSxVQUFVLENBQUMsRUFBRVYsd0JBQXdCSSxpQkFBaUJNO0lBRTVHWCxJQUFJSSxRQUFRLENBQUMsT0FBTyxFQUFFTCxXQUFXUSxnQkFBZ0IsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFTCxtQkFBbUJHLGlCQUFpQk4sV0FBV1EsZ0JBQWdCLEVBQUVULGlCQUFpQlMsZ0JBQWdCLENBQUNLLE1BQU07SUFFdExaLElBQUlJLFFBQVEsQ0FBQyxPQUFPLEVBQUVMLFdBQVdTLGdCQUFnQixDQUFDLHdCQUF3QixDQUFDLEVBQUVOLG1CQUFtQkcsaUJBQWlCTixXQUFXUyxnQkFBZ0IsRUFBRVYsaUJBQWlCVSxnQkFBZ0IsQ0FBQ0ksTUFBTTtJQUN0TFosSUFBSUksUUFBUSxDQUFDLE9BQU8sRUFBRUwsV0FBV1MsZ0JBQWdCLENBQUMsMEJBQTBCLENBQUMsRUFBRU4sbUJBQW1CRyxpQkFBaUJOLFdBQVdTLGdCQUFnQixFQUFFVixpQkFBaUJVLGdCQUFnQixDQUFDSyxRQUFRO0lBRTFMYixJQUFJSSxRQUFRLENBQUMsT0FBTyxFQUFFTCxXQUFXVSxZQUFZLENBQUMsd0JBQXdCLENBQUMsRUFBRVAsbUJBQW1CRyxpQkFBaUJOLFdBQVdVLFlBQVksRUFBRVgsaUJBQWlCVyxZQUFZLENBQUNHLE1BQU07SUFDMUtaLElBQUlJLFFBQVEsQ0FBQyxPQUFPLEVBQUVMLFdBQVdVLFlBQVksQ0FBQywwQkFBMEIsQ0FBQyxFQUFFUCxtQkFBbUJHLGlCQUFpQk4sV0FBV1UsWUFBWSxFQUFFWCxpQkFBaUJXLFlBQVksQ0FBQ0ksUUFBUTtBQUNoTCJ9