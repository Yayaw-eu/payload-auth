export { };

//# sourceMappingURL=data:application/json;base64,{"version":3,"sources":["../../../src/better-auth/plugin/types.ts"],"sourcesContent":["import type { UnionToIntersection, betterAuth } from 'better-auth'\nimport { FieldAttribute } from 'better-auth/db'\nimport type {\n  BetterAuthOptions as BetterAuthOptionsType,\n  BetterAuthPlugin as BetterAuthPluginType,\n  InferAPI,\n  InferPluginTypes\n} from 'better-auth/types'\nimport type { BasePayload, CollectionConfig, Config, Endpoint, Field, Payload, PayloadRequest } from 'payload'\nimport { ModelKey } from '../generated-types'\nimport { adminRoutes, baPluginSlugs, loginMethods, socialProviders } from './constants'\n\n/**\n * BetterAuth options with the following caveats:\n * - The `database` option is removed as it is configured internally\n * - The `user` `modelName` and `fields` is removed as it is configured internally\n * - The `account` `modelName` and `fields` is removed as it is configured internally\n * - The `session` `modelName` and `fields` is removed as it is configured internally\n * - The `verification` `modelName` and `fields` is removed as it is configured internally\n *\n * @see https://www.better-auth.com/docs/reference/options\n */\nexport interface BetterAuthOptions\n  extends Omit<BetterAuthOptionsType, 'database' | 'user' | 'account' | 'verification' | 'session' | 'advanced'> {\n  user?: Omit<NonNullable<BetterAuthOptionsType['user']>, 'modelName' | 'fields'> | undefined\n  account?: Omit<NonNullable<BetterAuthOptionsType['account']>, 'modelName' | 'fields'> | undefined\n  session?: Omit<NonNullable<BetterAuthOptionsType['session']>, 'modelName' | 'fields'> | undefined\n  verification?: Omit<NonNullable<BetterAuthOptionsType['verification']>, 'modelName' | 'fields'> | undefined\n  advanced?: Omit<NonNullable<BetterAuthOptionsType['advanced']>, 'generateId'> | undefined\n}\n\nexport interface SanitizedBetterAuthOptions extends Omit<BetterAuthOptionsType, 'database'> {}\n\nexport type SocialProvider = (typeof socialProviders)[number]\n\nexport type LoginMethod = (typeof loginMethods)[number]\n\ntype PluginCollectionOverrides = {\n  [K in keyof typeof baPluginSlugs]?: (options: { collection: CollectionConfig }) => CollectionConfig\n}\n\nexport interface BetterAuthPluginOptions {\n  /**\n   * Disable the plugin\n   * @default false\n   */\n  disabled?: boolean\n  /**\n   * Disable the default payload auth\n   *\n   * This will ensure that better-auth handles both admin and frontend auth\n   *\n   * Admin will make use of custom admin routes for auth and give you more control\n   *\n   * Note: This will override the option passed in the users collection config\n   *\n   * Read about this more in the docs\n   * @see https://www.payloadauth.com/docs/better-auth#disable-default-payload-auth\n   *\n   * @default false\n   */\n  disableDefaultPayloadAuth?: boolean\n  /**\n   * Custom admin components when disableDefaultPayloadAuth is true\n   *\n   * These components will be used to render the login, create first admin, and other auth-related views\n   */\n  admin?: {\n    /**\n     * Override which social buttons are shown in the Payload Login / Sign Up view.\n     *\n     * Provide an array of LoginMethod keys.\n     */\n    loginMethods?: LoginMethod[]\n  }\n  /**\n   * Debug options\n   */\n  debug?: {\n    /**\n     * Enable debug logs\n     * @default false\n     */\n    enableDebugLogs?: boolean\n    /**\n     * Log the tables that are needed for better-auth on init\n     * @default false\n     */\n    logTables?: boolean\n  }\n  /**\n   * Hide the better-authplugin collections from the payload admin UI\n   * @default false\n   */\n  hidePluginCollections?: boolean\n  /**\n   * Defines the admin group for collections.\n   * @default \"Auth\"\n   */\n  collectionAdminGroup?: string\n  /**\n   * Require a valid admin invitation for any *public* sign‑up.\n   *\n   * – Applies to both email/password and social‑provider flows.\n   * – Existing users can still sign in; admins can still create users via\n   *   the Payload UI or server‑side calls.\n   * – Ignores provider‑level `disableImplicitSignUp` and `disableSignUp`:\n   *   with a valid invite the sign‑up proceeds, without one it's blocked.\n   * – Also sets `disableImplicitSignUp` for all providers, requiring `requestSignUp` to be true for all `authClient.signIn.social` calls when creating a new account with a provider.\n   *\n   * Enable when you want OAuth for internal/admin use only and no public\n   * registrations at all.\n   *\n   * @default false\n   */\n  requireAdminInviteForSignUp?: boolean\n  /**\n   * BetterAuth options with the following caveats:\n   * - The `database` option is removed as it is configured internally\n   * - The `user` `modelName` and `fields` is removed as it is configured internally\n   * - The `account` `modelName` and `fields` is removed as it is configured internally\n   * - The `session` `modelName` and `fields` is removed as it is configured internally\n   * - The `verification` `modelName` and `fields` is removed as it is configured internally\n   *\n   * @see https://www.better-auth.com/docs/reference/options\n   */\n  betterAuthOptions?: BetterAuthOptions\n  /**\n   * Override plugin configurations\n   *\n   * Note: TypeScript cannot enforce that only enabled plugins are configured\n   * at compile time, but this will be validated at runtime.\n   */\n  pluginCollectionOverrides?: PluginCollectionOverrides\n  /**\n   * Configure the Users collections:\n   */\n  users?: {\n    /**\n     * Will set the `modelName` for the `user` table in better-auth\n     *\n     * and the `slug` for the `users` collection in payload\n     *\n     * @default 'users'\n     */\n    slug?: string | undefined\n    /**\n     * The default role for users\n     *\n     * This will be used as the default role for the role field in the users collection\n     *\n     * If you define this you must also have this role in the roles array\n     *\n     * This will also be used as the defaultRole option in the better-auth admin plugin if present\n     * @see https://www.better-auth.com/docs/plugins/admin#default-role\n     * @default \"user\"\n     */\n    defaultRole?: string\n    /**\n     * The default role for admins\n     *\n     * This will be used as the default role for when admins sign up in the create first admin view or when inviting new admins\n     *\n     *\n     * @default \"admin\"\n     */\n    defaultAdminRole?: string\n    /**\n     * All roles for the users collection\n     *\n     * These will be used to define all the options in the user collection role field\n     *\n     * Will be merged with the adminRoles array, no need to worry about redefining in adminRoles or duplicates\n     *\n     * This should match the roles in the better-auth admin plugin if you are using it\n     * @see https://www.better-auth.com/docs/plugins/admin#access-control\n     *\n     * @default [\"user\"]\n     */\n    roles?: string[]\n    /**\n     * Define admin roles for the users collection\n     *\n     * These roles will be given admin access to all auth collections created by this plugin\n     *\n     * Note: Will be merged with the roles array, no need to worry about redefining in roles or duplicates\n     *\n     * Will be also used as the adminRoles option in the better-auth admin plugin if present\n     *\n     * @see https://www.better-auth.com/docs/plugins/admin#admin-roles\n     *\n     * @default [\"admin\"]\n     */\n    adminRoles?: string[]\n    /**\n     * Hide the `users` collection from the payload admin UI\n     *\n     * This will be overwritten if you change the value in the collection overrides option\n     */\n    hidden?: boolean | undefined\n    /**\n     * Define which fields users can update themselves\n     *\n     * Password field is automatically included and doesn't need to be specified here\n     *\n     * @example ['name', 'dateOfBirth', 'phoneNumber']\n     * @default ['name']\n     */\n    allowedFields?: string[] | undefined\n    /**\n     * Function to override the collection configuration\n     *\n     * This allows modifying the collection config after it has been built\n     * Example use cases include adding saveToJwt to specific fields or\n     * modifying field descriptions\n     *\n     * @param options Object containing the collection config and potentially additional parameters\n     * @returns Modified collection config\n     */\n    collectionOverrides?: (options: { collection: CollectionConfig }) => CollectionConfig\n    /**\n     * This will block the first on sign up verification email from better-auth.\n     * If you are using Payload's userCollection.verify option, you will want to set this to true.\n     * Function that will be blocked: options.emailVerificationsendVerificationEmail\n     * @default false\n     */\n    blockFirstBetterAuthVerificationEmail?: boolean\n  }\n  /**\n   * Configure the Accounts collections:\n   */\n  accounts?: {\n    /**\n     * Will set the `modelName` for the `account` table in better-auth\n     *\n     * and the `slug` for the `accounts` collection in payload\n     *\n     * @default 'accounts'\n     */\n    slug?: string | undefined\n    /**\n     * Hide the `accounts` collection from the payload admin UI\n     */\n    hidden?: boolean | undefined\n    /**\n     * Function to override the collection configuration\n     *\n     * This allows modifying the collection config after it has been built\n     *\n     * @param options Object containing the collection config and potentially additional parameters\n     * @returns Modified collection config\n     */\n    collectionOverrides?: (options: { collection: CollectionConfig }) => CollectionConfig\n  }\n  /**\n   * Configure the Sessions collections:\n   */\n  sessions?: {\n    /**\n     * Will set the `modelName` for the `session` table in better-auth\n     *\n     * and the `slug` for the `sessions` collection in payload\n     *\n     * @default 'sessions'\n     */\n    slug?: string | undefined\n    /**\n     * Hide the `sessions` collection from the payload admin UI\n     */\n    hidden?: boolean | undefined\n    /**\n     * Function to override the collection configuration\n     *\n     * This allows modifying the collection config after it has been built\n     *\n     * @param options Object containing the collection config and potentially additional parameters\n     * @returns Modified collection config\n     */\n    collectionOverrides?: (options: { collection: CollectionConfig }) => CollectionConfig\n  }\n  /**\n   * Configure the Verifications collections:\n   */\n  verifications?: {\n    /**\n     * Will set the `modelName` for the `verification` table in better-auth\n     *\n     * and the `slug` for the `verifications` collection in payload\n     *\n     * @default 'verifications'\n     */\n    slug?: string | undefined\n    /**\n     * Hide the `verifications` collection from the payload admin UI\n     */\n    hidden?: boolean | undefined\n    /**\n     * Function to override the collection configuration\n     *\n     * This allows modifying the collection config after it has been built\n     *\n     * @param options Object containing the collection config and potentially additional parameters\n     * @returns Modified collection config\n     */\n    collectionOverrides?: (options: { collection: CollectionConfig }) => CollectionConfig\n  }\n  /**\n   * Configure the Admin Invitations collections:\n   */\n  adminInvitations?: {\n    /**\n     * Will set the `slug` for the `admin-invitations` collection in payload\n     *\n     * @default 'admin-invitations'\n     */\n    slug?: string | undefined\n    /**\n     * Hide the `admin-invitations` collection from the payload admin UI\n     */\n    hidden?: boolean | undefined\n    /**\n     * This will be used to generate the admin invite url\n     *\n     * @param options Object containing payload and the token\n     * @returns The admin invite url\n     */\n    generateInviteUrl?: GenerateAdminInviteUrlFn\n    /**\n     * This will be used to send the admin invite email\n     *\n     * @param options Object containing payload, email and the url\n     * @returns The admin invite url\n     */\n    sendInviteEmail?: SendAdminInviteEmailFn\n    /**\n     * Function to override the collection configuration\n     *\n     * This allows modifying the collection config after it has been built\n     *\n     * @param options Object containing the collection config and potentially additional parameters\n     * @returns Modified collection config\n     */\n    collectionOverrides?: (options: { collection: CollectionConfig }) => CollectionConfig\n  }\n}\n\nexport type SendAdminInviteEmailFn = (options: {\n  payload: Payload\n  email: string\n  url: string\n}) => Promise<{ success: true; message?: string } | { success: false; message: string }>\n\nexport type GenerateAdminInviteUrlFn = (options: { payload: Payload; token: string }) => string\n\nexport type ConfigAdminCustom = {\n  betterAuth: {\n    adminRoutes: {\n      [key in keyof typeof adminRoutes]: string\n    }\n  }\n}\n\nexport interface BetterAuthPlugin {\n  (config: Config): Config\n  pluginOptions: BetterAuthPluginOptions\n}\n\nexport interface PayloadRequestWithBetterAuth<TPlugins extends BetterAuthPluginType[] = []> extends PayloadRequest {\n  payload: BasePayload & {\n    betterAuth: BetterAuthReturn<TPlugins>\n  }\n}\n\nexport type CollectionHookWithBetterAuth<T extends (args: any) => any> = T extends (args: infer A) => infer R\n  ? (args: Omit<A, 'req'> & { req: PayloadRequestWithBetterAuth }) => R\n  : never\n\nexport type EndpointWithBetterAuth = Omit<Endpoint, 'handler'> & {\n  handler: (req: PayloadRequestWithBetterAuth) => Promise<Response> | Response\n}\n\nexport type ExtractEndpoints<T> = T extends BetterAuthPlugin ? (T extends { endpoints?: infer E } ? E : {}) : {}\n\nexport type TPlugins<TPlugins extends BetterAuthPluginType[] = BetterAuthPluginType[]> = TPlugins\n\nexport type PluginInferTypes<T extends TPlugins> = {\n  [K in keyof InferPluginTypes<{ plugins: T }>]: InferPluginTypes<{\n    plugins: T\n  }>[K]\n}\n\nexport type BetterAuthReturn<T extends TPlugins> = Omit<ReturnType<typeof betterAuth>, '$Infer'> & {\n  api: T extends (infer P)[] ? InferAPI<UnionToIntersection<ExtractEndpoints<P>>> : {}\n  $Infer: ReturnType<typeof betterAuth>['$Infer'] & PluginInferTypes<T>\n}\n\nexport type BetterAuthFunctionOptions<P extends TPlugins> = Omit<BetterAuthOptions, 'database' | 'plugins'> & {\n  enableDebugLogs?: boolean\n  plugins: P\n}\n\nexport interface BuiltBetterAuthSchema {\n  modelName: string\n  fields: Record<string, FieldAttribute>\n  order: number\n}\n\nexport type BetterAuthSchemas = Record<ModelKey, BuiltBetterAuthSchema>\n\n\nexport interface BuildCollectionProps {\n  resolvedSchemas: BetterAuthSchemas\n  pluginOptions: BetterAuthPluginOptions\n  incomingCollections: CollectionConfig[]\n}\n\nexport type FieldOverrides<K extends string = string> = {\n  [Key in K]?: (field: FieldAttribute) => Partial<Field>\n} & {\n  [key: string]: (field: FieldAttribute) => Partial<Field>\n}\n"],"names":[],"mappings":"AAgaA,WAIC"}