import { jsx as _jsx } from "react/jsx-runtime";
import { MinimalTemplate } from "@payloadcms/next/templates";
import { redirect } from "next/navigation";
import React from "react";
import { TwoFactorVerifyForm } from "./client";
import { cookies } from "next/headers";
import { getSafeRedirect } from "../../utils/get-safe-redirect";
import { valueOrDefaultString } from "../../../../../shared/utils/value-or-default";
import { adminRoutes, supportedBAPluginIds } from "../../../constants";
const TwoFactorVerify = async ({ searchParams, initPageResult, pluginOptions, verificationsSlug })=>{
    const { req } = initPageResult;
    const { payload: { config }, payload } = req;
    const { admin: { routes: { login } }, routes: { admin: adminRoute } } = config;
    const cookieStore = await cookies();
    const loginRoute = valueOrDefaultString(login, adminRoutes.adminLogin);
    const redirectUrl = getSafeRedirect(searchParams?.redirect, adminRoute);
    const twoFactorOptions = pluginOptions.betterAuthOptions?.plugins?.find((plugin)=>plugin.id === supportedBAPluginIds.twoFactor)?.options ?? {};
    const twoFactorCookie = cookieStore.get(`${process.env.NODE_ENV === 'production' ? '__Secure-' : ''}better-auth.two_factor`)?.value;
    if (!twoFactorCookie) {
        redirect(`${adminRoute}${loginRoute}`);
    }
    const twoFactorVerifyToken = twoFactorCookie.split('.').at(0);
    if (!twoFactorVerifyToken) {
        redirect(`${adminRoute}${loginRoute}`);
    }
    const { totalDocs: isValidTwoFactorToken } = await payload.count({
        collection: verificationsSlug,
        where: {
            identifier: {
                equals: twoFactorVerifyToken
            }
        }
    });
    if (!isValidTwoFactorToken) {
        redirect(`${adminRoute}${loginRoute}`);
    }
    return /*#__PURE__*/ _jsx(MinimalTemplate, {
        className: "two-factor-verify",
        children: /*#__PURE__*/ _jsx(TwoFactorVerifyForm, {
            redirect: redirectUrl,
            twoFactorDigits: twoFactorOptions?.totpOptions?.digits,
            baseURL: pluginOptions.betterAuthOptions?.baseURL,
            basePath: pluginOptions.betterAuthOptions?.basePath
        })
    });
};
export default TwoFactorVerify;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3NyYy9iZXR0ZXItYXV0aC9wbHVnaW4vcGF5bG9hZC92aWV3cy90d28tZmFjdG9yLXZlcmlmeS9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTWluaW1hbFRlbXBsYXRlIH0gZnJvbSAnQHBheWxvYWRjbXMvbmV4dC90ZW1wbGF0ZXMnXG5pbXBvcnQgeyByZWRpcmVjdCB9IGZyb20gJ25leHQvbmF2aWdhdGlvbidcbmltcG9ydCB0eXBlIHsgQWRtaW5WaWV3U2VydmVyUHJvcHMgfSBmcm9tICdwYXlsb2FkJ1xuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgVHdvRmFjdG9yVmVyaWZ5Rm9ybSB9IGZyb20gJy4vY2xpZW50J1xuaW1wb3J0IHsgY29va2llcyB9IGZyb20gJ25leHQvaGVhZGVycydcbmltcG9ydCB7IGdldFNhZmVSZWRpcmVjdCB9IGZyb20gJy4uLy4uL3V0aWxzL2dldC1zYWZlLXJlZGlyZWN0J1xuaW1wb3J0IHsgdmFsdWVPckRlZmF1bHRTdHJpbmcgfSBmcm9tICdAL3NoYXJlZC91dGlscy92YWx1ZS1vci1kZWZhdWx0J1xuaW1wb3J0IHsgYWRtaW5Sb3V0ZXMsIHN1cHBvcnRlZEJBUGx1Z2luSWRzIH0gZnJvbSAnQC9iZXR0ZXItYXV0aC9wbHVnaW4vY29uc3RhbnRzJ1xuaW1wb3J0IHsgQmV0dGVyQXV0aFBsdWdpbk9wdGlvbnMgfSBmcm9tICdAL2JldHRlci1hdXRoL3BsdWdpbi90eXBlcydcblxuaW50ZXJmYWNlIFR3b0ZhY3RvclZlcmlmeVByb3BzIGV4dGVuZHMgQWRtaW5WaWV3U2VydmVyUHJvcHMge1xuICBwbHVnaW5PcHRpb25zOiBCZXR0ZXJBdXRoUGx1Z2luT3B0aW9uc1xuICB2ZXJpZmljYXRpb25zU2x1Zzogc3RyaW5nXG59XG5cbmNvbnN0IFR3b0ZhY3RvclZlcmlmeTogUmVhY3QuRkM8VHdvRmFjdG9yVmVyaWZ5UHJvcHM+ID0gYXN5bmMgKHsgc2VhcmNoUGFyYW1zLCBpbml0UGFnZVJlc3VsdCwgcGx1Z2luT3B0aW9ucywgdmVyaWZpY2F0aW9uc1NsdWcgfSkgPT4ge1xuICBjb25zdCB7IHJlcSB9ID0gaW5pdFBhZ2VSZXN1bHRcbiAgY29uc3Qge1xuICAgIHBheWxvYWQ6IHsgY29uZmlnIH0sXG4gICAgcGF5bG9hZFxuICB9ID0gcmVxXG5cbiAgY29uc3Qge1xuICAgIGFkbWluOiB7XG4gICAgICByb3V0ZXM6IHsgbG9naW4gfVxuICAgIH0sXG4gICAgcm91dGVzOiB7IGFkbWluOiBhZG1pblJvdXRlIH1cbiAgfSA9IGNvbmZpZ1xuICBjb25zdCBjb29raWVTdG9yZSA9IGF3YWl0IGNvb2tpZXMoKVxuICBjb25zdCBsb2dpblJvdXRlID0gdmFsdWVPckRlZmF1bHRTdHJpbmcobG9naW4sIGFkbWluUm91dGVzLmFkbWluTG9naW4pXG4gIGNvbnN0IHJlZGlyZWN0VXJsID0gZ2V0U2FmZVJlZGlyZWN0KHNlYXJjaFBhcmFtcz8ucmVkaXJlY3QgYXMgc3RyaW5nLCBhZG1pblJvdXRlKVxuXG4gIGNvbnN0IHR3b0ZhY3Rvck9wdGlvbnMgPVxuICAgIHBsdWdpbk9wdGlvbnMuYmV0dGVyQXV0aE9wdGlvbnM/LnBsdWdpbnM/LmZpbmQoKHBsdWdpbikgPT4gcGx1Z2luLmlkID09PSBzdXBwb3J0ZWRCQVBsdWdpbklkcy50d29GYWN0b3IpPy5vcHRpb25zID8/IHt9XG5cbiAgY29uc3QgdHdvRmFjdG9yQ29va2llID0gY29va2llU3RvcmUuZ2V0KGAke3Byb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgPyAnX19TZWN1cmUtJyA6ICcnfWJldHRlci1hdXRoLnR3b19mYWN0b3JgKT8udmFsdWVcbiAgaWYgKCF0d29GYWN0b3JDb29raWUpIHtcbiAgICByZWRpcmVjdChgJHthZG1pblJvdXRlfSR7bG9naW5Sb3V0ZX1gKVxuICB9XG4gIGNvbnN0IHR3b0ZhY3RvclZlcmlmeVRva2VuID0gdHdvRmFjdG9yQ29va2llLnNwbGl0KCcuJykuYXQoMClcbiAgaWYgKCF0d29GYWN0b3JWZXJpZnlUb2tlbikge1xuICAgIHJlZGlyZWN0KGAke2FkbWluUm91dGV9JHtsb2dpblJvdXRlfWApXG4gIH1cbiAgY29uc3QgeyB0b3RhbERvY3M6IGlzVmFsaWRUd29GYWN0b3JUb2tlbiB9ID0gYXdhaXQgcGF5bG9hZC5jb3VudCh7XG4gICAgY29sbGVjdGlvbjogdmVyaWZpY2F0aW9uc1NsdWcsXG4gICAgd2hlcmU6IHtcbiAgICAgIGlkZW50aWZpZXI6IHtcbiAgICAgICAgZXF1YWxzOiB0d29GYWN0b3JWZXJpZnlUb2tlblxuICAgICAgfVxuICAgIH1cbiAgfSlcbiAgaWYgKCFpc1ZhbGlkVHdvRmFjdG9yVG9rZW4pIHtcbiAgICByZWRpcmVjdChgJHthZG1pblJvdXRlfSR7bG9naW5Sb3V0ZX1gKVxuICB9XG5cbiAgcmV0dXJuIChcbiAgICA8TWluaW1hbFRlbXBsYXRlIGNsYXNzTmFtZT1cInR3by1mYWN0b3ItdmVyaWZ5XCI+XG4gICAgICA8VHdvRmFjdG9yVmVyaWZ5Rm9ybVxuICAgICAgICByZWRpcmVjdD17cmVkaXJlY3RVcmx9XG4gICAgICAgIHR3b0ZhY3RvckRpZ2l0cz17dHdvRmFjdG9yT3B0aW9ucz8udG90cE9wdGlvbnM/LmRpZ2l0c31cbiAgICAgICAgYmFzZVVSTD17cGx1Z2luT3B0aW9ucy5iZXR0ZXJBdXRoT3B0aW9ucz8uYmFzZVVSTH1cbiAgICAgICAgYmFzZVBhdGg9e3BsdWdpbk9wdGlvbnMuYmV0dGVyQXV0aE9wdGlvbnM/LmJhc2VQYXRofVxuICAgICAgLz5cbiAgICA8L01pbmltYWxUZW1wbGF0ZT5cbiAgKVxufVxuXG5leHBvcnQgZGVmYXVsdCBUd29GYWN0b3JWZXJpZnlcbiJdLCJuYW1lcyI6WyJNaW5pbWFsVGVtcGxhdGUiLCJyZWRpcmVjdCIsIlJlYWN0IiwiVHdvRmFjdG9yVmVyaWZ5Rm9ybSIsImNvb2tpZXMiLCJnZXRTYWZlUmVkaXJlY3QiLCJ2YWx1ZU9yRGVmYXVsdFN0cmluZyIsImFkbWluUm91dGVzIiwic3VwcG9ydGVkQkFQbHVnaW5JZHMiLCJUd29GYWN0b3JWZXJpZnkiLCJzZWFyY2hQYXJhbXMiLCJpbml0UGFnZVJlc3VsdCIsInBsdWdpbk9wdGlvbnMiLCJ2ZXJpZmljYXRpb25zU2x1ZyIsInJlcSIsInBheWxvYWQiLCJjb25maWciLCJhZG1pbiIsInJvdXRlcyIsImxvZ2luIiwiYWRtaW5Sb3V0ZSIsImNvb2tpZVN0b3JlIiwibG9naW5Sb3V0ZSIsImFkbWluTG9naW4iLCJyZWRpcmVjdFVybCIsInR3b0ZhY3Rvck9wdGlvbnMiLCJiZXR0ZXJBdXRoT3B0aW9ucyIsInBsdWdpbnMiLCJmaW5kIiwicGx1Z2luIiwiaWQiLCJ0d29GYWN0b3IiLCJvcHRpb25zIiwidHdvRmFjdG9yQ29va2llIiwiZ2V0IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwidmFsdWUiLCJ0d29GYWN0b3JWZXJpZnlUb2tlbiIsInNwbGl0IiwiYXQiLCJ0b3RhbERvY3MiLCJpc1ZhbGlkVHdvRmFjdG9yVG9rZW4iLCJjb3VudCIsImNvbGxlY3Rpb24iLCJ3aGVyZSIsImlkZW50aWZpZXIiLCJlcXVhbHMiLCJjbGFzc05hbWUiLCJ0d29GYWN0b3JEaWdpdHMiLCJ0b3RwT3B0aW9ucyIsImRpZ2l0cyIsImJhc2VVUkwiLCJiYXNlUGF0aCJdLCJtYXBwaW5ncyI6IjtBQUFBLFNBQVNBLGVBQWUsUUFBUSw2QkFBNEI7QUFDNUQsU0FBU0MsUUFBUSxRQUFRLGtCQUFpQjtBQUUxQyxPQUFPQyxXQUFXLFFBQU87QUFDekIsU0FBU0MsbUJBQW1CLFFBQVEsV0FBVTtBQUM5QyxTQUFTQyxPQUFPLFFBQVEsZUFBYztBQUN0QyxTQUFTQyxlQUFlLFFBQVEsZ0NBQStCO0FBQy9ELFNBQVNDLG9CQUFvQixRQUFRLCtDQUFpQztBQUN0RSxTQUFTQyxXQUFXLEVBQUVDLG9CQUFvQixRQUFRLHFCQUFnQztBQVFsRixNQUFNQyxrQkFBa0QsT0FBTyxFQUFFQyxZQUFZLEVBQUVDLGNBQWMsRUFBRUMsYUFBYSxFQUFFQyxpQkFBaUIsRUFBRTtJQUMvSCxNQUFNLEVBQUVDLEdBQUcsRUFBRSxHQUFHSDtJQUNoQixNQUFNLEVBQ0pJLFNBQVMsRUFBRUMsTUFBTSxFQUFFLEVBQ25CRCxPQUFPLEVBQ1IsR0FBR0Q7SUFFSixNQUFNLEVBQ0pHLE9BQU8sRUFDTEMsUUFBUSxFQUFFQyxLQUFLLEVBQUUsRUFDbEIsRUFDREQsUUFBUSxFQUFFRCxPQUFPRyxVQUFVLEVBQUUsRUFDOUIsR0FBR0o7SUFDSixNQUFNSyxjQUFjLE1BQU1qQjtJQUMxQixNQUFNa0IsYUFBYWhCLHFCQUFxQmEsT0FBT1osWUFBWWdCLFVBQVU7SUFDckUsTUFBTUMsY0FBY25CLGdCQUFnQkssY0FBY1QsVUFBb0JtQjtJQUV0RSxNQUFNSyxtQkFDSmIsY0FBY2MsaUJBQWlCLEVBQUVDLFNBQVNDLEtBQUssQ0FBQ0MsU0FBV0EsT0FBT0MsRUFBRSxLQUFLdEIscUJBQXFCdUIsU0FBUyxHQUFHQyxXQUFXLENBQUM7SUFFeEgsTUFBTUMsa0JBQWtCWixZQUFZYSxHQUFHLENBQUMsR0FBR0MsUUFBUUMsR0FBRyxDQUFDQyxRQUFRLEtBQUssZUFBZSxjQUFjLEdBQUcsc0JBQXNCLENBQUMsR0FBR0M7SUFDOUgsSUFBSSxDQUFDTCxpQkFBaUI7UUFDcEJoQyxTQUFTLEdBQUdtQixhQUFhRSxZQUFZO0lBQ3ZDO0lBQ0EsTUFBTWlCLHVCQUF1Qk4sZ0JBQWdCTyxLQUFLLENBQUMsS0FBS0MsRUFBRSxDQUFDO0lBQzNELElBQUksQ0FBQ0Ysc0JBQXNCO1FBQ3pCdEMsU0FBUyxHQUFHbUIsYUFBYUUsWUFBWTtJQUN2QztJQUNBLE1BQU0sRUFBRW9CLFdBQVdDLHFCQUFxQixFQUFFLEdBQUcsTUFBTTVCLFFBQVE2QixLQUFLLENBQUM7UUFDL0RDLFlBQVloQztRQUNaaUMsT0FBTztZQUNMQyxZQUFZO2dCQUNWQyxRQUFRVDtZQUNWO1FBQ0Y7SUFDRjtJQUNBLElBQUksQ0FBQ0ksdUJBQXVCO1FBQzFCMUMsU0FBUyxHQUFHbUIsYUFBYUUsWUFBWTtJQUN2QztJQUVBLHFCQUNFLEtBQUN0QjtRQUFnQmlELFdBQVU7a0JBQ3pCLGNBQUEsS0FBQzlDO1lBQ0NGLFVBQVV1QjtZQUNWMEIsaUJBQWlCekIsa0JBQWtCMEIsYUFBYUM7WUFDaERDLFNBQVN6QyxjQUFjYyxpQkFBaUIsRUFBRTJCO1lBQzFDQyxVQUFVMUMsY0FBY2MsaUJBQWlCLEVBQUU0Qjs7O0FBSW5EO0FBRUEsZUFBZTdDLGdCQUFlIn0=