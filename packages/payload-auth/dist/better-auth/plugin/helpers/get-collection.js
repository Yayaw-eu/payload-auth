import { flattenAllFields } from "payload";
export function getCollectionByModelKey(collections, modelKey) {
    const collection = Object.values(collections).find((c)=>{
        return c.config?.custom?.betterAuthModelKey === modelKey;
    });
    if (!collection) {
        throw new Error(`Collection with key ${modelKey} not found`);
    }
    return collection.config;
}
/**
 * Retrieves the field name from a collection based on the field key
 *
 * This function searches through the fields of a collection to find a field
 * that has a matching custom property betterAuthFieldKey.
 *
 * @param collection - The collection configuration to search through
 * @param model - The model key of the collection (This is really just for type hinting)
 * @param fieldKey - The key of the field to search for
 * @returns The name of the field if found, otherwise the field key itself
 */ export function getCollectionFieldNameByFieldKey(collection, model, fieldKey) {
    const fields = flattenAllFields({
        fields: collection.fields
    });
    return fields.find((f)=>f.custom?.betterAuthFieldKey === fieldKey)?.name ?? fieldKey;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iZXR0ZXItYXV0aC9wbHVnaW4vaGVscGVycy9nZXQtY29sbGVjdGlvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZXR0ZXJBdXRoRnVsbFNjaGVtYSwgTW9kZWxLZXkgfSBmcm9tICdAL2JldHRlci1hdXRoL2dlbmVyYXRlZC10eXBlcydcbmltcG9ydCB7IGZsYXR0ZW5BbGxGaWVsZHMsIHR5cGUgQ29sbGVjdGlvbiwgdHlwZSBDb2xsZWN0aW9uQ29uZmlnIH0gZnJvbSAncGF5bG9hZCdcblxuZXhwb3J0IGZ1bmN0aW9uIGdldENvbGxlY3Rpb25CeU1vZGVsS2V5KGNvbGxlY3Rpb25zOiBSZWNvcmQ8c3RyaW5nLCBDb2xsZWN0aW9uPiwgbW9kZWxLZXk6IE1vZGVsS2V5KTogQ29sbGVjdGlvbkNvbmZpZyB7XG4gIGNvbnN0IGNvbGxlY3Rpb24gPSBPYmplY3QudmFsdWVzKGNvbGxlY3Rpb25zKS5maW5kKChjKSA9PiB7XG4gICAgcmV0dXJuIGMuY29uZmlnPy5jdXN0b20/LmJldHRlckF1dGhNb2RlbEtleSA9PT0gbW9kZWxLZXlcbiAgfSlcblxuICBpZiAoIWNvbGxlY3Rpb24pIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYENvbGxlY3Rpb24gd2l0aCBrZXkgJHttb2RlbEtleX0gbm90IGZvdW5kYClcbiAgfVxuXG4gIHJldHVybiBjb2xsZWN0aW9uLmNvbmZpZ1xufVxuXG4vKipcbiAqIFJldHJpZXZlcyB0aGUgZmllbGQgbmFtZSBmcm9tIGEgY29sbGVjdGlvbiBiYXNlZCBvbiB0aGUgZmllbGQga2V5XG4gKlxuICogVGhpcyBmdW5jdGlvbiBzZWFyY2hlcyB0aHJvdWdoIHRoZSBmaWVsZHMgb2YgYSBjb2xsZWN0aW9uIHRvIGZpbmQgYSBmaWVsZFxuICogdGhhdCBoYXMgYSBtYXRjaGluZyBjdXN0b20gcHJvcGVydHkgYmV0dGVyQXV0aEZpZWxkS2V5LlxuICpcbiAqIEBwYXJhbSBjb2xsZWN0aW9uIC0gVGhlIGNvbGxlY3Rpb24gY29uZmlndXJhdGlvbiB0byBzZWFyY2ggdGhyb3VnaFxuICogQHBhcmFtIG1vZGVsIC0gVGhlIG1vZGVsIGtleSBvZiB0aGUgY29sbGVjdGlvbiAoVGhpcyBpcyByZWFsbHkganVzdCBmb3IgdHlwZSBoaW50aW5nKVxuICogQHBhcmFtIGZpZWxkS2V5IC0gVGhlIGtleSBvZiB0aGUgZmllbGQgdG8gc2VhcmNoIGZvclxuICogQHJldHVybnMgVGhlIG5hbWUgb2YgdGhlIGZpZWxkIGlmIGZvdW5kLCBvdGhlcndpc2UgdGhlIGZpZWxkIGtleSBpdHNlbGZcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldENvbGxlY3Rpb25GaWVsZE5hbWVCeUZpZWxkS2V5PE0gZXh0ZW5kcyBNb2RlbEtleT4oXG4gIGNvbGxlY3Rpb246IENvbGxlY3Rpb25Db25maWcsXG4gIG1vZGVsOiBNLFxuICBmaWVsZEtleTogRXh0cmFjdDxrZXlvZiBCZXR0ZXJBdXRoRnVsbFNjaGVtYVtNXSwgc3RyaW5nPlxuKTogc3RyaW5nIHtcbiAgY29uc3QgZmllbGRzID0gZmxhdHRlbkFsbEZpZWxkcyh7IGZpZWxkczogY29sbGVjdGlvbi5maWVsZHMgfSlcbiAgcmV0dXJuIGZpZWxkcy5maW5kKChmKSA9PiBmLmN1c3RvbT8uYmV0dGVyQXV0aEZpZWxkS2V5ID09PSBmaWVsZEtleSk/Lm5hbWUgPz8gZmllbGRLZXlcbn1cbiJdLCJuYW1lcyI6WyJmbGF0dGVuQWxsRmllbGRzIiwiZ2V0Q29sbGVjdGlvbkJ5TW9kZWxLZXkiLCJjb2xsZWN0aW9ucyIsIm1vZGVsS2V5IiwiY29sbGVjdGlvbiIsIk9iamVjdCIsInZhbHVlcyIsImZpbmQiLCJjIiwiY29uZmlnIiwiY3VzdG9tIiwiYmV0dGVyQXV0aE1vZGVsS2V5IiwiRXJyb3IiLCJnZXRDb2xsZWN0aW9uRmllbGROYW1lQnlGaWVsZEtleSIsIm1vZGVsIiwiZmllbGRLZXkiLCJmaWVsZHMiLCJmIiwiYmV0dGVyQXV0aEZpZWxkS2V5IiwibmFtZSJdLCJtYXBwaW5ncyI6IkFBQ0EsU0FBU0EsZ0JBQWdCLFFBQWdELFVBQVM7QUFFbEYsT0FBTyxTQUFTQyx3QkFBd0JDLFdBQXVDLEVBQUVDLFFBQWtCO0lBQ2pHLE1BQU1DLGFBQWFDLE9BQU9DLE1BQU0sQ0FBQ0osYUFBYUssSUFBSSxDQUFDLENBQUNDO1FBQ2xELE9BQU9BLEVBQUVDLE1BQU0sRUFBRUMsUUFBUUMsdUJBQXVCUjtJQUNsRDtJQUVBLElBQUksQ0FBQ0MsWUFBWTtRQUNmLE1BQU0sSUFBSVEsTUFBTSxDQUFDLG9CQUFvQixFQUFFVCxTQUFTLFVBQVUsQ0FBQztJQUM3RDtJQUVBLE9BQU9DLFdBQVdLLE1BQU07QUFDMUI7QUFFQTs7Ozs7Ozs7OztDQVVDLEdBQ0QsT0FBTyxTQUFTSSxpQ0FDZFQsVUFBNEIsRUFDNUJVLEtBQVEsRUFDUkMsUUFBd0Q7SUFFeEQsTUFBTUMsU0FBU2hCLGlCQUFpQjtRQUFFZ0IsUUFBUVosV0FBV1ksTUFBTTtJQUFDO0lBQzVELE9BQU9BLE9BQU9ULElBQUksQ0FBQyxDQUFDVSxJQUFNQSxFQUFFUCxNQUFNLEVBQUVRLHVCQUF1QkgsV0FBV0ksUUFBUUo7QUFDaEYifQ==