import { getFieldsToSign } from "payload";
export async function prepareUser({ user, userCollection }) {
    const newUser = getFieldsToSign({
        collectionConfig: userCollection,
        email: user.email,
        user: {
            ...user,
            collection: userCollection.slug
        }
    });
    return newUser;
}
export async function prepareSession({ session, sessionCollection }) {
    const filteredSession = getFieldsToSign({
        collectionConfig: sessionCollection,
        email: '',
        user: {
            ...session,
            collection: sessionCollection.slug
        }
    });
    delete filteredSession.email;
    delete filteredSession.collection;
    Object.assign(filteredSession, {
        userId: session.userId
    });
    return filteredSession;
}
/**
 * Prepares session data for cookie cache by filtering user and session objects
 * based on the payload configuration's 'saveToJwt' property
 */ export async function prepareSessionData({ sessionData, usersCollection, sessionsCollection }) {
    if (!sessionData || !sessionData.user) return null;
    const newUser = await prepareUser({
        user: sessionData.user,
        userCollection: usersCollection
    });
    const newSession = await prepareSession({
        session: sessionData.session,
        sessionCollection: sessionsCollection
    });
    const newSessionData = {
        session: newSession,
        user: newUser
    };
    return newSessionData;
}

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9iZXR0ZXItYXV0aC9wbHVnaW4vaGVscGVycy9wcmVwYXJlLXNlc3Npb24tZGF0YS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTZXNzaW9uLCBVc2VyIH0gZnJvbSAnYmV0dGVyLWF1dGgnXG5pbXBvcnQgdHlwZSB7IENvbGxlY3Rpb25Db25maWcgfSBmcm9tICdwYXlsb2FkJ1xuaW1wb3J0IHsgZ2V0RmllbGRzVG9TaWduIH0gZnJvbSAncGF5bG9hZCdcblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHByZXBhcmVVc2VyKHsgdXNlciwgdXNlckNvbGxlY3Rpb24gfTogeyB1c2VyOiBVc2VyICYgUmVjb3JkPHN0cmluZywgYW55PjsgdXNlckNvbGxlY3Rpb246IENvbGxlY3Rpb25Db25maWcgfSkge1xuICBjb25zdCBuZXdVc2VyID0gZ2V0RmllbGRzVG9TaWduKHtcbiAgICBjb2xsZWN0aW9uQ29uZmlnOiB1c2VyQ29sbGVjdGlvbixcbiAgICBlbWFpbDogdXNlci5lbWFpbCxcbiAgICB1c2VyOiB7XG4gICAgICAuLi51c2VyLFxuICAgICAgY29sbGVjdGlvbjogdXNlckNvbGxlY3Rpb24uc2x1Z1xuICAgIH1cbiAgfSlcblxuICByZXR1cm4gbmV3VXNlciBhcyBVc2VyICYgUmVjb3JkPHN0cmluZywgYW55PlxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcHJlcGFyZVNlc3Npb24oe1xuICBzZXNzaW9uLFxuICBzZXNzaW9uQ29sbGVjdGlvblxufToge1xuICBzZXNzaW9uOiBTZXNzaW9uICYgUmVjb3JkPHN0cmluZywgYW55PlxuICBzZXNzaW9uQ29sbGVjdGlvbjogQ29sbGVjdGlvbkNvbmZpZ1xufSkge1xuICBjb25zdCBmaWx0ZXJlZFNlc3Npb24gPSBnZXRGaWVsZHNUb1NpZ24oe1xuICAgIGNvbGxlY3Rpb25Db25maWc6IHNlc3Npb25Db2xsZWN0aW9uLFxuICAgIGVtYWlsOiAnJyxcbiAgICB1c2VyOiB7XG4gICAgICAuLi5zZXNzaW9uLFxuICAgICAgY29sbGVjdGlvbjogc2Vzc2lvbkNvbGxlY3Rpb24uc2x1Z1xuICAgIH1cbiAgfSlcblxuICBkZWxldGUgZmlsdGVyZWRTZXNzaW9uLmVtYWlsXG4gIGRlbGV0ZSBmaWx0ZXJlZFNlc3Npb24uY29sbGVjdGlvblxuICBPYmplY3QuYXNzaWduKGZpbHRlcmVkU2Vzc2lvbiwge1xuICAgIHVzZXJJZDogc2Vzc2lvbi51c2VySWRcbiAgfSlcblxuICByZXR1cm4gZmlsdGVyZWRTZXNzaW9uIGFzIFNlc3Npb24gJiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG59XG5cbi8qKlxuICogUHJlcGFyZXMgc2Vzc2lvbiBkYXRhIGZvciBjb29raWUgY2FjaGUgYnkgZmlsdGVyaW5nIHVzZXIgYW5kIHNlc3Npb24gb2JqZWN0c1xuICogYmFzZWQgb24gdGhlIHBheWxvYWQgY29uZmlndXJhdGlvbidzICdzYXZlVG9Kd3QnIHByb3BlcnR5XG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcmVwYXJlU2Vzc2lvbkRhdGEoe1xuICBzZXNzaW9uRGF0YSxcbiAgdXNlcnNDb2xsZWN0aW9uLFxuICBzZXNzaW9uc0NvbGxlY3Rpb25cbn06IHtcbiAgc2Vzc2lvbkRhdGE6IHtcbiAgICBzZXNzaW9uOiBTZXNzaW9uICYgUmVjb3JkPHN0cmluZywgYW55PlxuICAgIHVzZXI6IFVzZXIgJiBSZWNvcmQ8c3RyaW5nLCBhbnk+XG4gIH1cbiAgdXNlcnNDb2xsZWN0aW9uOiBDb2xsZWN0aW9uQ29uZmlnXG4gIHNlc3Npb25zQ29sbGVjdGlvbjogQ29sbGVjdGlvbkNvbmZpZ1xufSkge1xuICBpZiAoIXNlc3Npb25EYXRhIHx8ICFzZXNzaW9uRGF0YS51c2VyKSByZXR1cm4gbnVsbFxuXG4gIGNvbnN0IG5ld1VzZXIgPSBhd2FpdCBwcmVwYXJlVXNlcih7IHVzZXI6IHNlc3Npb25EYXRhLnVzZXIsIHVzZXJDb2xsZWN0aW9uOiB1c2Vyc0NvbGxlY3Rpb24gfSlcbiAgY29uc3QgbmV3U2Vzc2lvbiA9IGF3YWl0IHByZXBhcmVTZXNzaW9uKHsgc2Vzc2lvbjogc2Vzc2lvbkRhdGEuc2Vzc2lvbiwgc2Vzc2lvbkNvbGxlY3Rpb246IHNlc3Npb25zQ29sbGVjdGlvbiB9KVxuXG4gIGNvbnN0IG5ld1Nlc3Npb25EYXRhID0ge1xuICAgIHNlc3Npb246IG5ld1Nlc3Npb24sXG4gICAgdXNlcjogbmV3VXNlclxuICB9XG5cbiAgcmV0dXJuIG5ld1Nlc3Npb25EYXRhXG59XG4iXSwibmFtZXMiOlsiZ2V0RmllbGRzVG9TaWduIiwicHJlcGFyZVVzZXIiLCJ1c2VyIiwidXNlckNvbGxlY3Rpb24iLCJuZXdVc2VyIiwiY29sbGVjdGlvbkNvbmZpZyIsImVtYWlsIiwiY29sbGVjdGlvbiIsInNsdWciLCJwcmVwYXJlU2Vzc2lvbiIsInNlc3Npb24iLCJzZXNzaW9uQ29sbGVjdGlvbiIsImZpbHRlcmVkU2Vzc2lvbiIsIk9iamVjdCIsImFzc2lnbiIsInVzZXJJZCIsInByZXBhcmVTZXNzaW9uRGF0YSIsInNlc3Npb25EYXRhIiwidXNlcnNDb2xsZWN0aW9uIiwic2Vzc2lvbnNDb2xsZWN0aW9uIiwibmV3U2Vzc2lvbiIsIm5ld1Nlc3Npb25EYXRhIl0sIm1hcHBpbmdzIjoiQUFFQSxTQUFTQSxlQUFlLFFBQVEsVUFBUztBQUV6QyxPQUFPLGVBQWVDLFlBQVksRUFBRUMsSUFBSSxFQUFFQyxjQUFjLEVBQTBFO0lBQ2hJLE1BQU1DLFVBQVVKLGdCQUFnQjtRQUM5Qkssa0JBQWtCRjtRQUNsQkcsT0FBT0osS0FBS0ksS0FBSztRQUNqQkosTUFBTTtZQUNKLEdBQUdBLElBQUk7WUFDUEssWUFBWUosZUFBZUssSUFBSTtRQUNqQztJQUNGO0lBRUEsT0FBT0o7QUFDVDtBQUVBLE9BQU8sZUFBZUssZUFBZSxFQUNuQ0MsT0FBTyxFQUNQQyxpQkFBaUIsRUFJbEI7SUFDQyxNQUFNQyxrQkFBa0JaLGdCQUFnQjtRQUN0Q0ssa0JBQWtCTTtRQUNsQkwsT0FBTztRQUNQSixNQUFNO1lBQ0osR0FBR1EsT0FBTztZQUNWSCxZQUFZSSxrQkFBa0JILElBQUk7UUFDcEM7SUFDRjtJQUVBLE9BQU9JLGdCQUFnQk4sS0FBSztJQUM1QixPQUFPTSxnQkFBZ0JMLFVBQVU7SUFDakNNLE9BQU9DLE1BQU0sQ0FBQ0YsaUJBQWlCO1FBQzdCRyxRQUFRTCxRQUFRSyxNQUFNO0lBQ3hCO0lBRUEsT0FBT0g7QUFDVDtBQUVBOzs7Q0FHQyxHQUNELE9BQU8sZUFBZUksbUJBQW1CLEVBQ3ZDQyxXQUFXLEVBQ1hDLGVBQWUsRUFDZkMsa0JBQWtCLEVBUW5CO0lBQ0MsSUFBSSxDQUFDRixlQUFlLENBQUNBLFlBQVlmLElBQUksRUFBRSxPQUFPO0lBRTlDLE1BQU1FLFVBQVUsTUFBTUgsWUFBWTtRQUFFQyxNQUFNZSxZQUFZZixJQUFJO1FBQUVDLGdCQUFnQmU7SUFBZ0I7SUFDNUYsTUFBTUUsYUFBYSxNQUFNWCxlQUFlO1FBQUVDLFNBQVNPLFlBQVlQLE9BQU87UUFBRUMsbUJBQW1CUTtJQUFtQjtJQUU5RyxNQUFNRSxpQkFBaUI7UUFDckJYLFNBQVNVO1FBQ1RsQixNQUFNRTtJQUNSO0lBRUEsT0FBT2lCO0FBQ1QifQ==